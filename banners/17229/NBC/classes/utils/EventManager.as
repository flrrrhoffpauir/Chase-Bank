class classes.utils.EventManager {	// constants			// public properties	private static var __CLASS_INSTANCE:EventManager = undefined;		// private properties	private static var __arr_listeners:Array = [];		function EventManager() { };	public static function showListeners():Void {		var len:Number = __arr_listeners.length; // get the length now rather than bog down the for loop		for(var i:Number = 0; i < len; i++) {			trace(i + " - event: " + __arr_listeners[i].event + "  listener: " + __arr_listeners[i].listener + "  mappedTo: " + __arr_listeners[i].mappedTo);		}	};			public static function getInstance():EventManager {		// ignore warning 1012 if you see it		if(__CLASS_INSTANCE == undefined) { __CLASS_INSTANCE = new EventManager(); } else { trace("EventManager instance already exists"); };		return __CLASS_INSTANCE;	};		public static function addEventListener(_event:String, _listener:Object, _mappedTo:String):Boolean {		var ev:String;		var li:Object;		// check to see if the Object has already been registered		for(var i in __arr_listeners) {			ev = __arr_listeners[i].event;			li = __arr_listeners[i].listener;			// if it has, exit			if(ev == _event && li == _listener) { return false; };		}		// ... if it hasn't, then register it now		__arr_listeners.push({ event:_event, listener:_listener, mappedTo:_mappedTo });		return true;	};		public static function removeEventListener(_event:String, _listener:Object):Boolean {		var ev:String;		var li:Object;		var len:Number = __arr_listeners.length; // get the length now rather than bog down the for loop		for(var i:Number = 0; i < len; i++) {			ev = __arr_listeners[i].event;			li = __arr_listeners[i].listener;			// if the Object is in the list, remove it			if(ev == _event && li == _listener) { __arr_listeners.splice(i, 1); return true; };		}		// otherwise, just shut down now		return false;	};		public static function dispatchEvent(_event:String, _data:Object):Void	{		// place information into an object		var evtObj:Object = { type:_event, data:_data };		// find Objects registered to hear this event		for(var i:String in __arr_listeners)		{			if(__arr_listeners[i].event == _event)			{				// if the Function has the same name as the event				//__arr_listeners[i].listener[_event](evtObj);				// if the Function has a unique name defined in the mappedTo property				__arr_listeners[i].listener[__arr_listeners[i].mappedTo](evtObj);			}		}	};	}
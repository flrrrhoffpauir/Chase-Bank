/* *	SeparatorObj Class, Created 2007-08-17 *	Copyright (c) 2007 T3. All rights reserved. *	@description Class to ease the amount of work Tim and Junie need to perform to Chase banners *	@usageNote Make sure you create parent MC with a nested MC containing a bitmap *	@authors Timothy Harold and Junie Threatt *	@version 1.0 *	 *	I am too lazy to complete the remaining javadocs comments - Tim :-) **/import mx.transitions.Tween;import mx.transitions.easing.*;class SeparatorObj extends MovieClip{	// static variables			// private variables		private var __scope:MovieClip;	private var __sepDistance:Number;	private var __maskTileSize:Number;	private var __rowCols:Number;		private var __leftTween:Tween;	private var __rightTween:Tween;		private var __leftFadeTween:Tween;	private var __rightFadeTween:Tween;		private var __lmTween:Tween;	private var __rtTween:Tween;		private var __buildingHomeX:Number;	private var __building2HomeX:Number;		private var __lmHomeX:Number;	private var __rmHomeX:Number;		private var __fadeSpeed:Number;	private var __splitSpeed:Number;			// public variables	public var building:MovieClip;	public var building2:MovieClip;	public var lm:MovieClip;	public var rm:MovieClip;			// constructor	function SeparatorObj(obj:MovieClip, sepDistance:Number, fadeSpeed:Number, splitSpeed:Number, maskTileSize:Number, rowCols:Number)	{		__scope = obj;		__sepDistance = sepDistance;		__fadeSpeed = fadeSpeed;		__splitSpeed = splitSpeed;		__maskTileSize = maskTileSize;		__rowCols = rowCols;				// get the ball rolling...		_init();	}				// private methods	private function _init():Void	{		// reset the depth level of the master copy of the building in the mcBuilding# container		__scope.building.swapDepths(0);				// dupe it as "building2"		__scope.building.duplicateMovieClip("building2", 5, { _x:__scope.building._x, _y:__scope.building._y });				// create the mask containers		__scope.lm = __scope.createEmptyMovieClip("buildingMask", __scope.building.getDepth() + 1);		__scope.rm = __scope.createEmptyMovieClip("building2Mask", __scope.building2.getDepth() + 1);				// build the masks, pass it an integer so that it makes even/odd checkerboard mask		makeMask(__scope.lm, __scope.building, 0); // 0 = odds		makeMask(__scope.rm, __scope.building2, 1); // 1 = evens				// center the mask to the target		centerMask(__scope.lm, { w:__scope.building._width, h:__scope.building._height }, { w:__scope.lm._width, h:__scope.lm._height });		centerMask(__scope.rm, { w:__scope.building2._width, h:__scope.building2._height }, { w:__scope.rm._width, h:__scope.rm._height });				// track the home x coords for tweening		__buildingHomeX = __scope.building._x;		__building2HomeX = __scope.building2._x;		__lmHomeX = __scope.lm._x;		__rmHomeX = __scope.rm._x;				// assign the masks		__scope.building.setMask(__scope.lm);		__scope.building2.setMask(__scope.rm);			}		private function makeMask(maskContainer:MovieClip, targetImageClip:MovieClip, evenOdd:Number):Void	{		// grab the width and height		var targWidth:Number = Math.ceil(targetImageClip._width);		var targHeight:Number = Math.ceil(targetImageClip._height);				// generate the mask then receive w and h for centering to target		drawMask(maskContainer, { w:targWidth, h:targHeight }, evenOdd);	}		private function drawMask(maskContainer:MovieClip, targWH:Object, evenOdd:Number):Void	{		// track the tiles created so we can test even or odd		var currTile:Number = 0;				// build out the tile mask grid		for(var i:Number = 0; i < __rowCols; i++)		{			for(var j:Number = 0; j < __rowCols; j++)			{				// step				currTile++;								// even or odd				if(currTile % 2 == evenOdd)				{										// tile to draw the square					maskContainer.createEmptyMovieClip("t"+ currTile, currTile);					var m:MovieClip = maskContainer["t" + currTile];					m._x = i * __maskTileSize;					m._y = j * __maskTileSize;										// draw the rectangle/square					m.beginFill(0x000000, 100);					m.moveTo(0, 0);					m.lineTo(__maskTileSize, 0);					m.lineTo(__maskTileSize, __maskTileSize);					m.lineTo(0, __maskTileSize);					m.lineTo(0, 0);					m.endFill();									}			}			}	}		private function centerMask(maskContainer:MovieClip, targWH:Object, maskWH:Object):Void	{		maskContainer._x = -(maskWH.w / 2);		maskContainer._y = -(maskWH.h / 2);	}		private function stopAllTweens():Void	{		__leftTween.stop();		__rightTween.stop();		__leftFadeTween.stop();		__rightFadeTween.stop();		__lmTween.stop();		__rtTween.stop();	}				// public methods	public function split():Void	{		stopAllTweens();		__leftTween = new Tween(__scope.building, "_x", Strong.easeOut, __buildingHomeX, __building2HomeX - __sepDistance, __splitSpeed, true);		__rightTween = new Tween(__scope.building2, "_x", Strong.easeOut, __building2HomeX, __building2HomeX + __sepDistance, __splitSpeed, true);				__leftFadeTween = new Tween(__scope.building, "_alpha", Strong.easeOut, __scope.building._alpha, 0, __fadeSpeed, true);		__rightFadeTween = new Tween(__scope.building2, "_alpha", Strong.easeOut, __scope.building2._alpha, 0, __fadeSpeed, true);				__lmTween = new Tween(__scope.lm, "_x", Strong.easeOut, __lmHomeX, __lmHomeX - __sepDistance, __splitSpeed, true);		__rtTween = new Tween(__scope.rm, "_x", Strong.easeOut, __rmHomeX, __rmHomeX + __sepDistance, __splitSpeed, true);	}		public function join():Void	{		stopAllTweens();		__leftTween = new Tween(__scope.building, "_x", Strong.easeOut, __buildingHomeX - __sepDistance, __buildingHomeX, __splitSpeed, true);		__rightTween = new Tween(__scope.building2, "_x", Strong.easeOut, __building2HomeX + __sepDistance, __building2HomeX, __splitSpeed, true);				__leftFadeTween = new Tween(__scope.building, "_alpha", Strong.easeOut, __scope.building._alpha, 100, __fadeSpeed, true);		__rightFadeTween = new Tween(__scope.building2, "_alpha", Strong.easeOut, __scope.building2._alpha, 100, __fadeSpeed, true);				__lmTween = new Tween(__scope.lm, "_x", Strong.easeOut, __lmHomeX - __sepDistance, __lmHomeX, __splitSpeed, true);		__rtTween = new Tween(__scope.rm, "_x", Strong.easeOut, __rmHomeX + __sepDistance, __rmHomeX, __splitSpeed, true);	}			// handlers					// END	}
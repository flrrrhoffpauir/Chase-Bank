/** *	SimpleBannerBorder Class, Created 2007-10-01 *	Copyright (c) 2007 T3. All rights reserved. * *	Use to create the border of the banner. In the Class *  constructor, pass a MovieClip instance that will be  *  used to contain an AS drawn border. Then, invoke the  *  drawBorder(_rgb:Number) method. Dimensions will be *  based on (Stage.width - 1) and (Stage.height - 1). *  The _x and _y will be offset by .5px. No additional *  changes will need to be applied when resizing as the *  drawBorder method references the Stage dimensions. * *	@author Timothy Harold *	@version 1.0 *	*/class classes.utils.SimpleBannerBorder{	// static properties			// private properties	private var __targetClip:MovieClip;			// public properties				// Class constructor	/**	 * Invoke the drawBorder() method to draw the banner's border.	 * Requires a MovieClip to hold the banner's border graphics.	 * Dimensions will be based on (Stage.width - 1) and	 * (Stage.height - 1). The _x and _y will be offset by .5px.  	 *	 * @params _targetHotspot A reference to the Hotspot.	 */	function SimpleBannerBorder(_targetClip:MovieClip)	{				// reference to the Hotspot		__targetClip = _targetClip;	}				// private methods  ------------------------------------------------------------------------------			// public methods  -------------------------------------------------------------------------------	/**	 * Requires a MovieClip to hold the banner's border graphics. The Class	 * will draw the border based on the properties passed inside of the 	 * MovieClip instance provided.	Dimensions will be based on (Stage.width - 1)  	 * and (Stage.height - 1). The _x and _y will be offset by .5px. 	 *	 * @param _rgb A hex value specifying the border color. Default is #000000.	 * @param _strokeWidth A Number indicating the width in pixels to draw the stroke.	 */	public function drawBorder(_rgb:Number, _strokeWidth:Number):Void	{		// if no _strokeWidth passed, then defualt to 1px		var sw:Number = (_strokeWidth == undefined || _strokeWidth == null) ? 1 : _strokeWidth;				// set the starting coordinate (offset by .5)		var startOffset:Number = .5;				// grab the Stage width and height		var drawWidth:Number = Stage.width - 1;		var drawHeight:Number = Stage.height - 1;				// default to black if hex is not passed		var color:Number = (_rgb == undefined || _rgb == null) ? 0x000000 : _rgb;				// draw		__targetClip.lineStyle(sw, color, 100);		__targetClip.moveTo(.5, .5);		__targetClip.lineTo(drawWidth, .5);		__targetClip.lineTo(drawWidth, drawHeight);		__targetClip.lineTo(.5, drawHeight);		__targetClip.lineTo(.5, .5);					// set to 0, 0		__targetClip._x = __targetClip._y = 0;	}			// handlers/listeners  ---------------------------------------------------------------------------					// end}
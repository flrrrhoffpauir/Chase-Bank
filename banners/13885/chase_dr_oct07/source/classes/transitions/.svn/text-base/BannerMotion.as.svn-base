/** *	BannerMotion Class, Created 2007-10-04 *	Copyright (c) 2007 T3. All rights reserved. * * *  fade(), to(), from(), rotate(), scale() * * *	@author Timothy Harold *	@version 1.0 *	*/ import mx.transitions.Tween;import mx.transitions.easing.*;  class classes.transitions.BannerMotion {	// static properties			// private properties	private var __scope:MovieClip;			// public properties				// Class constructor	/**	 * Invoke the drawBorder() method to draw the banner's border.	 * Requires a MovieClip to hold the banner's border graphics.	 * Dimensions will be based on (Stage.width - 1) and	 * (Stage.height - 1). The _x and _y will be offset by .5px.  	 *	 */	function BannerMotion()	{				// BannerMotion	}				// private methods  ------------------------------------------------------------------------------	/**	 *  This Function is called from the within the conditional inside the scale() Function.	 *	 *  @param _mc The target MovieClip	 *  @param _theScale A String that determines _xscale, _yscale, or both: "x", "y", or "xy".	 *  @param _scaleStart A Number that represents the starting scale percentage.	 *  @param _scaleEnd A Number that represents the ending scale percentage.	 *  @param _duration A Number representing the time in seconds to perform the Tween.	 *  @param _easeType A String that represents the type of easing to apply to the Tween.	 *  @param _nextFunction [optional] A Function that needs to be called upon completion of the Tween. 	 */	private function singleScale(_mc:MovieClip, _theScale:String, _scaleStart:Number, _scaleEnd:Number, _duration:Number, _easeType:String, _nextFunction:Function):Void	{		// set the property to Tween based on _theDirection		var scale:String = (_theScale == "x") ? "_xscale" : "_yscale";				// perform the Tween		var mScaleTween = new Tween(_mc, scale, setEasing(_easeType), _scaleStart, _scaleEnd, _duration, true);				// when completed, call the next Function		mScaleTween.onMotionFinished = function():Void		{			if(_nextFunction != undefined ) { _nextFunction.apply(__scope); };		}	}		/**	 *  This Function is called from the within the conditional inside the scale() Function.	 *	 *  @param _mc The target MovieClip	 *  @param _theScale A String that determines _xscale, _yscale, or both: "x", "y", or "xy".	 *  @param _scaleStart A Number that represents the starting scale percentage.	 *  @param _scaleEnd A Number that represents the ending scale percentage.	 *  @param _duration A Number representing the time in seconds to perform the Tween.	 *  @param _easeType A String that represents the type of easing to apply to the Tween.	 *  @param _nextFunction [optional] A Function that needs to be called upon completion of the Tween. 	 */	private function dualScale(_mc:MovieClip, _scaleStart:Number, _scaleEnd:Number, _duration:Number, _easeType:String, _nextFunction:Function):Void	{		// perform the Tweens		var mScaleXTween = new Tween(_mc, "_xscale", setEasing(_easeType), _scaleStart, _scaleEnd, _duration, true);		var mScaleYTween = new Tween(_mc, "_yscale", setEasing(_easeType), _scaleStart, _scaleEnd, _duration, true);				// when completed, call the next Function		mScaleYTween.onMotionFinished = function():Void		{			if(_nextFunction != undefined ) { _nextFunction.apply(__scope); };		}	}		/**	 *  This Function is called from the within each Tween to convert from String to Function.	 *	 *  @param _easeType A String that represents the Easing Function to be used in the Tween.	 */	private function setEasing(_easeType:String):Function	{		switch(_easeType)		{			case "Regular.easeIn":				return Regular.easeIn;				break;			case "Regular.easeOut":				return Regular.easeOut;				break;			case "Regular.easeInOut":				return Regular.easeInOut;				break;			case "Strong.easeIn":				return Strong.easeIn;				break;			case "Strong.easeOut":				return Strong.easeOut;				break;			case "Strong.easeInOut":				return Strong.easeInOut;				break;			case "Back.easeIn":				return Back.easeIn;				break;			case "Back.easeOut":				return Back.easeOut;				break;			case "Back.easeInOut":				return Back.easeInOut;				break;			case "Bounce.easeIn":				return Bounce.easeIn;				break;			case "Bounce.easeOut":				return Bounce.easeOut;				break;			case "Bounce.easeInOut":				return Bounce.easeInOut;				break;			case "Elastic.easeIn":				return Elastic.easeIn;				break;			case "Elastic.easeOut":				return Elastic.easeOut;				break;			case "Elastic.easeInOut":				return Elastic.easeInOut;				break;		}	}			// public methods  -------------------------------------------------------------------------------	/**	 *  Used to fade in/out MovieClips.	 *  	 *  @param _mc The target MovieClip	 *  @param _startAlpha A Number representing the starting _alpha value.	 *  @param _endAlpha A Number representing the ending _alpha value.	 *  @param _duration A Number representing the time in seconds to perform the Tween.	 *  @param _easeType A String that represents the type of easing to apply to the Tween.	 *  @param _nextFunction [optional] A Function that needs to be called upon completion of the Tween. 	 */	public function fade(_mc:MovieClip, _startAlpha:Number, _endAlpha:Number, _duration:Number, _easeType:String, _nextFunction:Function):Void	{	 	// perform the Tween		var mAlphaTween = new Tween(_mc, "_alpha", setEasing(_easeType), _startAlpha, _endAlpha, _duration, true);				// when completed, call the next Function		mAlphaTween.onMotionFinished = function():Void		{			if(_nextFunction != undefined ) { _nextFunction.apply(__scope); };		}	}		/**	 *  Used to animate MovieClips from their current position to a new coordinate.	 *  	 *  @param _mc The target MovieClip	 *  @param _prop A String that defines _x or _y.	 *  @param _endCoord A Number representing the ending position of the MovieClip.	 *  @param _duration A Number representing the time in seconds to perform the Tween.	 *  @param _easeType A String that represents the type of easing to apply to the Tween.	 *  @param _nextFunction [optional] A Function that needs to be called upon completion of the Tween. 	 */	public function to(_mc:MovieClip, _prop:String, _endCoord:Number, _duration:Number, _easeType:String, _nextFunction:Function):Void	{		// perform the Tween		var mToTween = new Tween(_mc, _prop, setEasing(_easeType), _mc[_prop], _endCoord, _duration, true);				// when completed, call the next Function		mToTween.onMotionFinished = function():Void		{			if(_nextFunction != undefined ) { _nextFunction.apply(__scope); };		}	}		/**	 *  Used to animate MovieClips from a new starting position to the current coordinate.	 *  	 *  @param _mc The target MovieClip	 *  @param _prop A String that defines _x or _y.	 *  @param _startCoord A Number representing the starting position of the MovieClip.	 *  @param _duration A Number representing the time in seconds to perform the Tween.	 *  @param _easeType A String that represents the type of easing to apply to the Tween.	 *  @param _nextFunction [optional] A Function that needs to be called upon completion of the Tween. 	 */	public function from(_mc:MovieClip, _prop:String, _startCoord:Number, _duration:Number, _easeType:String, _nextFunction:Function):Void	{		// perform the Tween		var mFromTween = new Tween(_mc, _prop, setEasing(_easeType), _startCoord, _mc[_prop], _duration, true);				// when completed, call the next Function		mFromTween.onMotionFinished = function():Void		{			if(_nextFunction != undefined ) { _nextFunction.apply(__scope); };		}	}		/**	 *  Used to rotate MovieClips.	 *  	 *  @param _mc The target MovieClip	 *  @param _startRot A Number representing the starting _rotation value.	 *  @param _endRot A Number representing the ending _rotation value.	 *  @param _duration A Number representing the time in seconds to perform the Tween.	 *  @param _easeType A String that represents the type of easing to apply to the Tween.	 *  @param _nextFunction [optional] A Function that needs to be called upon completion of the Tween. 	 */	public function rotate(_mc:MovieClip, _startRot:Number, _endRot:Number, _duration:Number, _easeType:String, _nextFunction:Function):Void	{	 	// perform the Tween		var mRotTween = new Tween(_mc, "_rotation", setEasing(_easeType), _startRot, _endRot, _duration, true);				// when completed, call the next Function		mRotTween.onMotionFinished = function():Void		{			if(_nextFunction != undefined ) { _nextFunction.apply(__scope); };		}	}		/**	 *  Used to animate the _xscale and/or _yscale of a MovieClip.	 *	 *  @param _mc The target MovieClip	 *  @param _theScale A String that determines _xscale, _yscale, or both: "x", "y", or "xy".	 *  @param _scaleStart A Number that represents the starting scale percentage.	 *  @param _scaleEnd A Number that represents the ending scale percentage.	 *  @param _duration A Number representing the time in seconds to perform the Tween.	 *  @param _easeType A String that represents the type of easing to apply to the Tween.	 *  @param _nextFunction [optional] A Function that needs to be called upon completion of the Tween. 	 */	public function scale(_mc:MovieClip, _theScale:String, _scaleStart:Number, _scaleEnd:Number, _duration:Number, _easeType:String, _nextFunction:Function):Void	{		// set the property to Tween based on _theDirection		if(_theScale == "xy")		{			// scales both x and y			dualScale(_mc, _scaleStart, _scaleEnd, _duration, _easeType, _nextFunction);		}		else		{			// scales x or y			singleScale(_mc, _theScale, _scaleStart, _scaleEnd, _duration, _easeType, _nextFunction);		}	}			 	 	 		// handlers/listeners  ---------------------------------------------------------------------------					// end}
import mx.events.EventDispatcher;class Slider {		private var _sliderButton:MovieClip;	private var _sliderBar:MovieClip;	private var _origMC:MovieClip;	private var _maskMC:MovieClip;	private var _sliderX:Number;	private var __refNum:Number;	var _sliderBounds:Object;	var _sliderOffset:Number;	var _sliderZero:Number;	var _sliderScale:Number;			public var addEventListener:Function;	public var removeEventListener:Function;	public var dispatchEvent:Function;	var mouseListener:Object;		public function Slider(button:MovieClip, bar:MovieClip, origMC:MovieClip, maskMC:MovieClip, val:Number, sliderX:Number, _refNum:Number) {			EventDispatcher.initialize(this);		this._sliderButton = button;		this._sliderBar = bar;		this._origMC = origMC;		this._maskMC = maskMC;		this._sliderX = sliderX;		this.__refNum = _refNum;		setSliderBounds();		initSlider();								_sliderButton._y = this._maskMC.top;		if(val > 0)			_sliderButton._x = 194 * (val/400);		else			_sliderButton._y = this._maskMC.left;	}				private function setSliderBounds():Void {		this._sliderBounds = new Object();		this._sliderBounds.top = this._sliderBounds.bottom = _maskMC._height / 2 - 5;		this._sliderBounds.left = _sliderButton._width/2;		this._sliderBounds.right = _sliderBar._width - _sliderButton._width/2;		this._sliderOffset = Math.round(this._sliderBounds.left);	}		private function setVerticalScale():Void {		this._sliderZero = this._sliderButton._y - this._sliderOffset;		this._sliderScale = Math.round((this._sliderZero/this._sliderBar._height) * 100);	}		private function initSlider():Void {				var scope = this;		mouseListener = new Object();				this._sliderButton.onPress = function() {			delete this.onEnterFrame;			this.startDrag(false, scope._sliderBounds.left, scope._sliderBounds.top, scope._sliderBounds.right, scope._sliderBounds.bottom);			scope.dispatchEvent({target:this, type:"onHandlePress",mc:scope._sliderBar, mc2:scope._origMC, refNum:scope.__refNum });			Mouse.addListener(scope.mouseListener);			updateAfterEvent();		}				this._sliderBar.onPress = function() {			delete this.onEnterFrame;			scope._sliderButton._x = this._xmouse;			scope._sliderButton.startDrag(false,scope._sliderBounds.left,scope._sliderBounds.top,scope._sliderBounds.right,scope._sliderBounds.bottom);			Mouse.addListener(scope.mouseListener);			updateAfterEvent();		}				this._sliderBar.onRelease = this._sliderBar.onReleaseOutside = function() {			scope._sliderButton.stopDrag();			Mouse.removeListener(scope.mouseListener);			scope.dispatchEvent({target:this, type:"onSlideBarReleased", pos:scope._sliderButton._x, mc:scope._maskMC,percent:scope.handlePosValue(scope._sliderButton._x), mc2:scope._origMC, x:scope._sliderX, refNum:scope.__refNum });			updateAfterEvent();		}				this._sliderButton.onRelease = this._sliderButton.onReleaseOutside = function() {			this.stopDrag();			Mouse.removeListener(scope.mouseListener);			scope.dispatchEvent({target:this, type:"onHandleReleased", pos:scope._sliderButton._x, mc:scope._sliderBar, mc2:scope._origMC, refNum:scope.__refNum });			updateAfterEvent();		}				this._sliderButton.onRollOver = function() {			scope.dispatchEvent({target:this, type:"onHandleRollOver", mc:scope._maskMC, mc2:scope._origMC, refNum:scope.__refNum });		}				this._sliderButton.onRollOut = function() {			scope.dispatchEvent({target:this, type:"onHandleRollOut", mc:scope._maskMC, mc2:scope._origMC, refNum:scope.__refNum });		}				this._sliderBar.onRollOver = function() {			scope.dispatchEvent({target:this, type:"onSlideBarRollOver", mc:scope._maskMC, mc2:scope._origMC, refNum:scope.__refNum });		}				this._sliderBar.onRollOut = function() {			scope.dispatchEvent({target:this, type:"onSlideBarRollOut", mc:scope._maskMC, mc2:scope._origMC, refNum:scope.__refNum });		}				mouseListener.onMouseMove = function() {			scope.setVerticalScale();			scope.dispatchEvent({target:this, type:"onHandleSlide", pos:scope._sliderButton._x, percent:scope.handlePosValue(scope._sliderButton._x), mc:scope._maskMC, mc2:scope._origMC, sliderX:scope._sliderX, refNum:scope.__refNum });						updateAfterEvent();		}	}			public function handlePosValue(val:Number):Number {		return Math.ceil((1/((_sliderBounds.right - _sliderBounds.left)/100) * (val - _sliderBounds.left)));	}}
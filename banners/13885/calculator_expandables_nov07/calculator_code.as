// calculator_code.asimport mx.transitions.Tween;import mx.transitions.easing.*;import mx.utils.Delegate;import mx.events.EventDispatcher;EventDispatcher.initialize(this);this.addEventListener("onSlideBarReleased", this);this.addEventListener("onHandlePressed", this);/***************************************************////	DECLARE VARIABLES//***************************************************/var amount:Number;var totalSp:Number;var additionalExpense:Number = 0;var myTimeOut:Number;var baseEarn:Number;var bonusEarn:Number;var bonusTotal:Number;var regBonus:Number;var monthlyTotal:Number;var annualTotal:Number;var alertHideY:Number = this._parent.mcAlert._y;var alertVisibleY:Number = alertHideY - 100;var bonusArr:Array = new Array(0, 0, 0);var slideArr:Array = new Array(slide1, slide2, slide3, slide4, slide5, slide6, slide7, slide8, slide9, slide10, slide11, slide12, slide13, slide14, slide15, slide16);var slideArrValues:Array = new Array(50, 38, 27, 17, 12, 22, 15, 35, 8, 22, 36, 12, 20, 15, 18, 105);var interaction:Boolean = false;var popUp:Boolean = false;var txtFieldPaths:MovieClip = this._parent.mcSummary;var alertOpen:Boolean = false;// for the _root helper functionvar sliderBoundsLeft:Number = slideArr[0].sliderBar_mc.slider_mc._width / 2;var sliderBoundsRight:Number = slideArr[0].sliderBar_mc.slideBkg._width - slideArr[0].sliderBar_mc.slider_mc._width / 2;/*Total monthly spend $665gas spend is: $46grocery spend is: $60qsr/fast food spend is: $10*//***************************************************////	INITIALIZE FUNCTION//	Initialize this shizzle//***************************************************/function init() {	for (x=0; x<slideArr.length; x++) {		this["kimslider"+x] = new Slider(slideArr[x].sliderBar_mc.slider_mc, slideArr[x].sliderBar_mc.slideBkg, slideArr[x], slideArr[x].sliderBar_mc, slideArrValues[x], x, x);		//slideArr[x].sliderBar_mc.fill_mc._xscale = 0;		slideArr[x].sliderBar_mc.fill_mc._x = -150;		slideArr[x].sliderBar_mc.slider_mc._alpha = 0;		this["kimslider" + x].addEventListener("onHandleSlide", this);		this["kimslider" + x].addEventListener("onHandleRollOver", this);		this["kimslider" + x].addEventListener("onHandleRollOut", this);		this["kimslider" + x].addEventListener("onHandleReleased", this);		this["kimslider" + x].addEventListener("onHandlePress", this);		this["kimslider" + x].addEventListener("onSlideBarRollOver", this);		this["kimslider" + x].addEventListener("onSlideBarRollOut", this);		this["kimslider" + x].addEventListener("onSlideBarReleased", this);				// ********** cache for performance ********** 		slideArr[x].percent_mc.cacheAsBitmap = slideArr[x].sliderBar_mc.slideBkg.cacheAsBitmap = slideArr[x].sliderBar_mc.fill_mc.cacheAsBitmap = slideArr[x].sliderBar_mc.slider_mc.cacheAsBitmap = true;	}			//initialize the sliders with default value	//adajustSliderValue(x val for slider, value of the slider, position if applicable)	//if position doesnt exist then pass -1	setInitialSliderPositions();}init();// sets the initial slider valuesfunction setInitialSliderPositions():Void{	for(var x:Number = 0; x < slideArr.length; x++)	{		adjustSliderValue(x, slideArrValues[x], -1);		if(x != 15) // bug fix		{			slideArr[x].sliderBar_mc.slider_mc._x = Math.round((slideArrValues[x] / 2) * .85); // HACK !!!!!!!!!!!!!!!!!!!!!!		}		else if(x == 15) // bug fix		{			slideArr[x].sliderBar_mc.slider_mc._x = Math.round((slideArrValues[x] / 2) * .70); // HACK !!!!!!!!!!!!!!!!!!!!!!		}	}}/***************************************************////	EVENT HANDLERS//	These functions handle all the events//***************************************************/cta_mc.onRollOver = function():Void{	this.gotoAndPlay(2);}cta_mc.onRelease = function() {	if (Number(totalSpend_txt.text) > 0 && interaction != false) {		var transString:String = createTrans();		//trace(transString);		//getURL("javascript:__utmSetTrans();");		_level0.gglTrans(transString);		//setTimeout(runGoogleTrans, 50, transString);	}	setTimeout(runGoogleTrack, 500)	setTimeout(openApplyNow, 1000)};//BORDER HOTSPOT//when user mouses over hotspot edge, send information to Javascipt functionhotSpot.useHandCursor = hotSpot2.useHandCursor = hotSpot3.useHandCursor = hotSpot4.useHandCursor = false;hotSpot.onRollOver = hotSpot2.onRollOver = hotSpot3.onRollOver = hotSpot4.onRollOver = function () {	send2JS();};function onHandlePress(evtObj:Object):Void{ // **********************************************************	//trace("onHandlePress");	evtObj.mc2.sliderBar_mc.slider_mc.gotoAndStop(2);	this._parent.mcSliderLabels["mcL" + evtObj.refNum].gotoAndStop(2); // bold	updateAfterEvent();}function onHandleRollOver(evtObj:Object):Void {	//trace("onHandleRollOver");	evtObj.mc.slider_mc._alpha = 100;	evtObj.mc2.dollars_mc._alpha = 100;	this._parent.mcSliderLabels["mcL" + evtObj.refNum].gotoAndStop(2); // bold	updateAfterEvent();}function onHandleRollOut(evtObj:Object):Void {	//trace("onHandleRollOut");	evtObj.mc.slider_mc._alpha = 0;	evtObj.mc2.dollars_mc._alpha = 50;	this._parent.mcSliderLabels["mcL" + evtObj.refNum].gotoAndStop(1); // normal	updateAfterEvent();}function onSlideBarRollOut(evtObj:Object):Void {	//trace("onSlideBarRollOut");	evtObj.mc.slider_mc._alpha = 0;	evtObj.mc2.dollars_mc._alpha = 50;	this._parent.mcSliderLabels["mcL" + evtObj.refNum].gotoAndStop(1); // normal	updateAfterEvent();}function onSlideBarRollOver(evtObj:Object):Void {	//trace("onSlideBarRollOver");	evtObj.mc.slider_mc._alpha = 100;	evtObj.mc2.dollars_mc._alpha = 100;	this._parent.mcSliderLabels["mcL" + evtObj.refNum].gotoAndStop(2); // bold	updateAfterEvent();}function onHandleReleased(evtObj:Object):Void {	//trace("onHandleReleased");		// resume the vid timer	vidNav_conn.sliderReleaseStartVidTimer();		evtObj.mc2.sliderBar_mc.slider_mc.gotoAndStop(1);	if(bonusTotal >= 600 && (intervalId == null || bubble_mc._alpha == 100)) {		intervalId = setInterval(this, "killBubble", 10000);	} else {		//trace("pre delete interval id = " + intervalId);		clearInterval(intervalId);		delete intervalId;		//trace("post delete interval id = " + intervalId);	}	/*	//Google Analytic	if (!interaction) {		_level0.gglTrack("calculator/slider_move");		interaction = true;	}	*/	updateAfterEvent();}function onSlideBarReleased(evtObj:Object):Void { // **********************************************************	//trace("onSlideBarReleased");	if (bonusTotal >= 600 && (intervalId == null || bubble_mc._alpha == 100)) {		intervalId = setInterval(this, "killBubble", 10000);	} else {		//trace("pre delete interval id = " + intervalId);		clearInterval(intervalId);		delete intervalId;		//trace("post delete interval id = " + intervalId);	}		var scale = evtObj.percent;	var pos = evtObj.pos;	amount = Math.ceil(scale * 4);		adjustSliderValue(evtObj.x, amount, pos);	evtObj.mc.slider_mc.gotoAndStop(1);	/*	//Google Analytic	if (!interaction) {		_level0.gglTrack("calculator/slider_move");		interaction = true;	}	*/	updateAfterEvent();}/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////function onHandleSlide(evtObj:Object):Void { // **********************************************************	//trace("onHandleSlide");	var scale = evtObj.percent;	var pos = evtObj.pos;	amount = Math.ceil(scale * 4);	//trace(evtObj.sliderX + " " + amount + " " + pos);	adjustSliderValue(evtObj.sliderX, amount, pos);	updateAfterEvent();}function adjustSliderValue(x:Number, val:Number, position:Number):Void {		var scale:Number = val/400;	var pos:Number;	if(position >= 0)		pos = position;	else		pos = 150 * (val/400);			//little math to make sure slider looks good	//at zero it  should not be shown	//at 100 it should fill the entire bar	//otherwise have it move behind the handle		if(scale == 0)		slideArr[x].sliderBar_mc.fill_mc._x = -152.5;	else if (scale == 1)		slideArr[x].sliderBar_mc.fill_mc._x = 0;	else		slideArr[x].sliderBar_mc.fill_mc._x = pos - 150;		//calc math for slider		amount = val;	slideArr[x].dollars_mc.dollars_txt.text = amount;	calcTop3();	totalSpend();	base();	bonus();	monthly();	annual();		updateAfterEvent();}/***************************************************////	FORMULA FUNCTIONS//	These functions do the main grunt work for the math//***************************************************/function totalSpend() {	var slider1:Number = new Number(slide1.dollars_mc.dollars_txt.text);	var slider2:Number = new Number(slide2.dollars_mc.dollars_txt.text);	var slider3:Number = new Number(slide3.dollars_mc.dollars_txt.text);	var slider4:Number = new Number(slide4.dollars_mc.dollars_txt.text);	var slider5:Number = new Number(slide5.dollars_mc.dollars_txt.text);	var slider6:Number = new Number(slide6.dollars_mc.dollars_txt.text);	var slider7:Number = new Number(slide7.dollars_mc.dollars_txt.text);	var slider8:Number = new Number(slide8.dollars_mc.dollars_txt.text);	var slider9:Number = new Number(slide9.dollars_mc.dollars_txt.text);	var slider10:Number = new Number(slide10.dollars_mc.dollars_txt.text);	var slider11:Number = new Number(slide11.dollars_mc.dollars_txt.text);	var slider12:Number = new Number(slide12.dollars_mc.dollars_txt.text);	var slider13:Number = new Number(slide13.dollars_mc.dollars_txt.text);	var slider14:Number = new Number(slide14.dollars_mc.dollars_txt.text);	var slider15:Number = new Number(slide15.dollars_mc.dollars_txt.text);	var slider16:Number = new Number(slide16.dollars_mc.dollars_txt.text);	totalSp = (slider1+slider2+slider3+slider4+slider5+slider6+slider7+slider8+slider9+slider10+slider11+slider12+slider13+slider14+slider15+slider16+additionalExpense);	//trace(totalSp);	txtFieldPaths.totalSpend_txt.text = totalSp;}function base() {	baseEarn = totalSp * 0.01;	txtFieldPaths.baseEarn_txt.text = formatAsDollars(baseEarn);}function bonus() {	// trace("1 = " + bonusArr[0]);	// trace("2 = " + bonusArr[1]);	// trace("3 = " + bonusArr[2]);	bonusTotal = Number(bonusArr[0]) + Number(bonusArr[1]) + Number(bonusArr[2]);		if(bonusTotal < 600)		popUp = false;	//check to see if bonus valus is greater than 600	//if so, then show the bubble warning user that they	//have maxed out their bonus earnings	if (bonusTotal >= 600) {		// trace("more than 600");		if(!popUp) {			popUp = true;			//new Tween(bubble_mc, "_alpha", Regular.easeOut, bubble_mc._alpha, 100, .2, true);			showAlert();		}		bonusEarn = 12;	} else {		// trace("less than 600");		//new Tween(bubble_mc, "_alpha", Regular.easeOut, bubble_mc._alpha, 0, .2, true);		bonusEarn = bonusTotal * 0.02;		hideAlert();	}	txtFieldPaths.bonusEarn_txt.text = formatAsDollars(bonusEarn);}function monthly() {	//all totals multiplied by 1%	monthlyTotal = baseEarn+bonusEarn;	txtFieldPaths.monthlyTotal_txt.text = formatAsDollars(monthlyTotal);}function annual() {	//annualTotal = monthly totals x 12	annualTotal = monthlyTotal*12;	txtFieldPaths.annualTotal_txt.text = formatAsDollars(annualTotal);}function calcTop3():Void {	//tempArr will be used to figure out the top 3 categories	var tempArr:Array = new Array();	//take the slideArr length and subtract one so that the last element 	// "Everything Else" does not get evaluated into Bonus Earn	for (var x:Number=0; x<slideArr.length-1; x++) {		//add all the values to tempArr		tempArr.push(slideArr[x].dollars_mc.dollars_txt.text);	}	//sort tempArr into a descending order	tempArr.sort(sortByNumber);	tempArr.reverse();	//trace(sortByNumber);	for(x = 0;x < tempArr.length;x++) {	//add all the values to tempArr	//trace("tempArr2 " + x + " " + tempArr[x]);	}	//add the top 3 arrays to the bonusArr	bonusArr[0] = tempArr[0];	bonusArr[1] = tempArr[1];	bonusArr[2] = tempArr[2];	var bonusCount:Number = 0;	for (x=0; x<slideArr.length; x++) {		//we now have the bonusArr set properly.  Check it against all the dollars_txt files		//if true then set the 3% bonus to be visible		//else false then set the 3% bonus to be invisible		if ((bonusArr[0] == slideArr[x].dollars_mc.dollars_txt.text || bonusArr[1] == slideArr[x].dollars_mc.dollars_txt.text || bonusArr[2] == slideArr[x].dollars_mc.dollars_txt.text) && slideArr[x].dollars_mc.dollars_txt.text != 0 && x != 15 && bonusCount < 3) {			new Tween(slideArr[x].percent_mc, "_alpha", Regular.easeOut, slideArr[x].percent_mc._alpha, 100, .2, true);			bonusCount++;			//trace("bonusCount = " + bonusCount);		} else {			new Tween(slideArr[x].percent_mc, "_alpha", Regular.easeOut, slideArr[x].percent_mc._alpha, 0, .2, true);		}	}}/***************************************************////	HELPER FUNCTIONS//	Additional functions that help manipulate data//***************************************************//*function runGoogleTrans(s:String) {	trace(s);	_level0.gglTrans(s);}function runGoogleTrack() {	trace("send track");	_level0.gglTrack("apply_primary");}function openApplyNow() {	trace("send page");	getURL("https://app.firstusa.com/ICAppServlet/?SPID=7FK7&PID=CHFD4&CELL=6TRP&MSC=Z0061431&AFFID=&CLICK=&CID=&PROMO=DF01", "_blank");}*/function killBubble() {	//after 10 seconds kill the bubble that informs user	//that they have maxed out bonus earnings	if (intervalId != undefined) {		//trace("kill Bubble Intervalid = " + intervalId);		//new Tween(bubble_mc, "_alpha", Regular.easeOut, bubble_mc._alpha, 0, .2, true);		hideAlert();		clearInterval(intervalId);		delete intervalId;	} else {		//new Tween(bubble_mc, "_alpha", Regular.easeOut, bubble_mc._alpha, 0, .2, true);		hideAlert();	}}function sortByNumber(a, b) {	//Sort numbers numerically b/c the NUMERIC 	//array sort doesn't work properly	return (Number(a)>Number(b));}function formatAsDollars(amount:Number):String {	// return a 0 dollar value if amount is not valid	// (you may optionally want to return an empty string)	if (isNaN(amount)) {		return "$0.00";	}	// round the amount to the nearest 100th 	amount = Math.round(amount*100)/100;	// convert the number to a string	var amount_str:String = String(amount);	// split the string by the decimal point, separating the	// whole dollar value from the cents. Dollars are in	// amount_array[0], cents in amount_array[1]	var amount_array = amount_str.split(".");	// if there are no cents, add them using "00"	if (amount_array[1] == undefined) {		amount_array[1] = "00";	}	// if the cents are too short, add necessary "0" 	if (amount_array[1].length == 1) {		amount_array[1] += "0";	}	// add the dollars portion of the amount to an 	// array in sections of 3 to separate with commas	var dollar_array:Array = new Array();	var start:Number;	var end:Number = amount_array[0].length;	while (end>0) {		start = Math.max(end-3, 0);		dollar_array.unshift(amount_array[0].slice(start, end));		end = start;	}	// assign dollar value back in amount_array with	// the a comma delimited value from dollar_array	amount_array[0] = dollar_array.join(",");	// finally construct the return string joining	// dollars with cents in amount_array	return ("$"+amount_array.join("."));}/*//SEND to Javascriptfunction send2JS() {	if (Number(totalSpend_txt.text) > 0 && interaction != false) {				if(Number(slideArr[0].dollars_mc.dollars_txt.text) == slideArrValues[0] && Number(slideArr[1].dollars_mc.dollars_txt.text) == slideArrValues[1] && Number(slideArr[2].dollars_mc.dollars_txt.text) == slideArrValues[2] && Number(slideArr[3].dollars_mc.dollars_txt.text) == slideArrValues[3] && Number(slideArr[4].dollars_mc.dollars_txt.text) == slideArrValues[4])			trace("eq");		else			trace("not eq");		var transString:String = createTrans();		getURL("javascript:setTrackingVals('"+transString+"');");	}}//creates the transaction string to be sent to Googlefunction createTrans():String {	var transString:String = new String();	//gets UTC to use as unique identifer	var my_date:Date = new Date();	transString += "UTM:T|"+my_date.getTime()+"|Chase Learning Center Calculator|"+totalSpend_txt.text+"|"+baseEarn+"|"+bonusEarn+"|Austin|TX|USA\n";	for (var x:Number = 0; x<slideArr.length; x++) {		transString += "UTM:I|"+my_date.getTime()+"|"+str_pad(String(x+1), "0", 2)+"|"+slideArrNames[x]+"|Category|"+slideArr[x].dollars_mc.dollars_txt.text+"|1\n";	}	//trace(transString);	return transString;}//STRING PADDING//function to add padding to the beginning of a string for tracking purposesfunction str_pad(s:String, padding:String, num:Number):String {	//get length of current string then add padding to left side	var s_len:Number = s.length;	if (s_len<num) {		var final_str:String;		for (var i:Number = 0; i<(num-s_len); i++) {			final_str = padding.concat(s);		}	} else {		final_str = s;	}	return final_str;}*/function showAlert():Void{	if(!alertOpen)	{		alertOpen = true;		new Tween(this._parent.mcAlert, "_y", Strong.easeOut, alertHideY, alertVisibleY, 1, true);	}}function hideAlert():Void{	if(alertOpen)	{		alertOpen = false;		new Tween(this._parent.mcAlert, "_y", Strong.easeOut, alertVisibleY, alertHideY, 1.5, true);	}}
/** *	VideoController Class, Created 2007-10-05 *	Copyright (c) 2007 T3. All rights reserved. * *	@author Timothy Harold *	@version 1.0 *	*/import mx.utils.Delegate;import classes.Broadcaster;class classes.VideoController{	// static properties				// private properties	private var __videoPlayer:MovieClip;	private var __scope:MovieClip;	private var __broadcaster:Broadcaster;	private var __class_ref:VideoController;		private var __nc:NetConnection;	private var __ns:NetStream;	private var __vidSound:Sound;		// interval id's	private var __vidLoaderID:Number;	private var __nsLoaderID:Number;	private var __soundID:Number;	private var __scrubID:Number;	private var __vidDuration:Number; // total seconds of video		private var __loaderBarReset:Number; // used to reset at completion of video playback	private var __videoPath:String; // path to external flv - "tv/tale1.flv";	private var __vidNum:Number = 0;		// public properties	// vidObj	//public var mcVidController:MovieClip;	//public var mcPlay:MovieClip;	//public var mcBuffer:MovieClip;	//public var vidObj:Object;	public var __pathToMcLoader:MovieClip;					// Class constructor	/**	 * 	 *	 * @params xxxxx xxxxxxxxxxx	 */	function VideoController(_scope:MovieClip, _broadcaster:Broadcaster, _videoPlayer:MovieClip)	{				// start the app		// init(); // called on the Main Timeline				// reference to the MainTimeline		__scope = _scope;				// point to this Class		__class_ref = this;				// reference to the Broadcaster Class		__broadcaster = _broadcaster;				// reference to the video player instance		__videoPlayer = _videoPlayer;				// set up a listener for the tile clicks to play videos		//__broadcaster.addEventListener("onNewVideo", this, "playNewVideo");				// shortcut		__pathToMcLoader = __videoPlayer.mcVidController.mcLoader;				init();	}				// private methods  ------------------------------------------------------------------------------	/**	 * 	 *	 * @param xxxx xxxxxxx	 */	private function init():Void	{		// set up the conn		__nc = new NetConnection();		__nc.connect(null); // not using the FlashCommunicationServer		__ns = new NetStream(__nc);				// trap the sound of the video, control volume		__videoPlayer.createEmptyMovieClip("mcVidSound", __videoPlayer.getNextHighestDepth());		__videoPlayer.mcVidSound.attachAudio(__ns);		__vidSound = new Sound(__videoPlayer.mcVidSound);				// find the total time of the video in seconds		__ns["onMetaData"] = Delegate.create(this, onMetaDataEvent);				 // used to reset at completion of video playback		__loaderBarReset = __videoPlayer.mcVidController.mcLoader.mcLoaderBar._width;						// set up the handlers		__ns.onStatus = Delegate.create(this, onStatusEvent);				__videoPlayer.mcVidController.mcPlayPause.onRelease = Delegate.create(this, playPauseRelease);		__videoPlayer.mcVidController.mcLoader.mcScrubber.onPress = Delegate.create(this, scrubberPress);		__videoPlayer.mcVidController.mcLoader.mcScrubber.onRelease = Delegate.create(this, scrubberRelease);		__videoPlayer.mcVidController.mcLoader.mcScrubber.onReleaseOutside = Delegate.create(this, scrubberRelease);		__videoPlayer.mcVidController.mcSoundControl.mcSoundTab.onPress = Delegate.create(this, soundTabPress);		__videoPlayer.mcVidController.mcSoundControl.mcSoundTab.onRelease = Delegate.create(this, soundTabRelease);				// reset the value displayed		__videoPlayer.mcBuffer.txtPercent.text = "0 %";				__videoPlayer.vidObj.attachVideo(__ns);  // connect the stream to the video object		__ns.setBufferTime(3); // amount of video in seconds to buffer before playing						// start all of the functions		clearInterval(__nsLoaderID);		__nsLoaderID = setInterval(this, "checkNSBytesLoaded", 10);				clearInterval(__vidLoaderID);		__vidLoaderID = setInterval(this, "vidLoaderStatus", 100);				clearInterval(__soundID);		__soundID = setInterval(this, "adjustVolumeAndTime", 10);				// show the buffer panel 		__videoPlayer.mcBuffer._visible = true;			}		/**	 *	 * @param xxxx xxxxxxx	 */	private function onMetaDataEvent(obj:Object):Void	{		__vidDuration = obj.duration;	}			/**	 *	 * @param xxxx xxxxxxx	 */	private function onStatusEvent(_info:Object):Void	{		switch(_info.code)		{			case "NetStream.Buffer.Empty":				// show the buffer				__videoPlayer.mcBuffer._visible = true;				__videoPlayer.mcVidController.mcPlayPause.gotoAndStop("play");				break;			case "NetStream.Buffer.Full":				// hide the buffer				__videoPlayer.mcBuffer._visible = false;				__videoPlayer.mcVidController.mcPlayPause.gotoAndStop("pause");				break;			case "NetStream.Play.Stop":				// return to beginning of video				__ns.seek(0);				__ns.pause();								// reset the controls				__videoPlayer.mcVidController.mcLoader.mcLoaderBar._width = __loaderBarReset;				__videoPlayer.mcVidController.mcLoader.mcScrubber._x = 0;				__videoPlayer.mcVidController.mcPlayPause.gotoAndStop("play");				break;		}	};			/**	 * used to show the user the video buffer	 *	 * @param xxxx xxxxxxx	 */	private function vidLoaderStatus():Void	{		//trace("vidLoaderStatus()");		var loaderWidth:Number = __videoPlayer.mcVidController.mcLoader._width;		var amtLoaded:Number = __ns.bytesLoaded / __ns.bytesTotal;		__videoPlayer.mcVidController.mcLoader.mcLoaderBar._width = amtLoaded * loaderWidth;		__videoPlayer.mcVidController.mcLoader.mcScrubber._x = __ns.time / __vidDuration * loaderWidth;				if(__videoPlayer.mcVidController.mcLoader.mcLoaderBar._width > __loaderBarReset) { __videoPlayer.mcVidController.mcLoader.mcLoaderBar._width = __loaderBarReset; };		if(__videoPlayer.mcVidController.mcLoader.mcScrubber._x > __videoPlayer.mcVidController.mcLoader.mcLoaderBar._width) { __videoPlayer.mcVidController.mcLoader.mcScrubber._x = 0; };	}	 	/**	 * used to seek() within the video 	 *	 * @param xxxx xxxxxxx	 */	private function scrubVideo():Void	{		//trace("scrubVideo()");		__ns.seek(Math.floor((__pathToMcLoader.mcScrubber._x / __pathToMcLoader._width) * __vidDuration));	}		/**	 * used to adjust the volume and display the time elapsed	 *	 * @param xxxx xxxxxxx	 */	private function adjustVolumeAndTime():Void	{		//trace("adjustVolumeAndTime()");		var vol:Number = (__videoPlayer.mcVidController.mcSoundControl.mcSoundTab._x / __videoPlayer.mcVidController.mcSoundControl.mcSoundTrack._width) * 100;		__vidSound.setVolume(vol);				var mins:String;		var secs:String;		var minutes:Number = Math.floor(__ns.time / 60);		var seconds:Number = Math.floor(__ns.time % 60);		mins = String(minutes);		secs = String(seconds);		if(minutes < 10) { mins = "0" + minutes; };		if(seconds < 10) { secs = "0" + seconds; };		__videoPlayer.mcVidController.txtTime.text = "0:" + mins + ":" + secs;	}		/**	 * used to display the amount of data buffered	 *	 * @param xxxx xxxxxxx	 */	private function checkNSBytesLoaded():Void	{		//trace("checkNSBytesLoaded()");		var percent:Number = Math.round((__ns.bytesLoaded / __ns.bytesTotal) * 100);		__videoPlayer.mcBuffer.txtPercent.text = String(percent) + " %";		if(percent >= 100) { clearInterval(__nsLoaderID); };	}		/**	 *	 * @param xxxx xxxxxxx	 */	private function playPauseRelease():Void	{		__ns.pause(); // acts as a toggle switch - play/pause		var pos:String = (__videoPlayer.mcVidController.mcPlayPause._currentframe == 1) ? "pause" : "play";		__videoPlayer.mcVidController.mcPlayPause.gotoAndStop(pos); // toggle the appearance	}	/**	 *	 * @param xxxx xxxxxxx	 */	private function scrubberPress():Void	{		// stop the vidLoaderStatus() and start the scrubVideo()		clearInterval(__vidLoaderID);		__scrubID = setInterval(this, "scrubVideo", 10);		__videoPlayer.mcVidController.mcLoader.mcScrubber.startDrag(false, 0, __videoPlayer.mcVidController.mcLoader.mcScrubber._y, __videoPlayer.mcVidController.mcLoader._width,__videoPlayer. mcVidController.mcLoader.mcScrubber._y);	}	/**	 *	 * @param xxxx xxxxxxx	 */	private function scrubberRelease():Void	{		// stop the scrubVideo() and start the vidLoaderStatus()		clearInterval(__scrubID);		__vidLoaderID = setInterval(this, "vidLoaderStatus", 10);		__videoPlayer.mcVidController.mcLoader.mcScrubber.stopDrag();	}	/**	 *	 * @param xxxx xxxxxxx	 */	private function soundTabPress():Void { __videoPlayer.mcVidController.mcSoundControl.mcSoundTab.startDrag(false, 0, __videoPlayer.mcVidController.mcSoundControl.mcSoundTab._y, __videoPlayer.mcVidController.mcSoundControl.mcSoundTrack._width, __videoPlayer.mcVidController.mcSoundControl.mcSoundTab._y); };	/**	 *	 * @param xxxx xxxxxxx	 */	private function soundTabRelease():Void { __videoPlayer.mcVidController.mcSoundControl.mcSoundTab.stopDrag(); };				// public methods  -------------------------------------------------------------------------------	/**	 * 	 *	 * @param xxx xxxxx	 */	public function playNewVideo(_vidNum:Number):Void	{		trace("playNewVideo(): " + _vidNum);		// start watching the buffering		__videoPlayer.mcBuffer.txtPercent.text = "0 %"; // reset the value displayed		clearInterval(__nsLoaderID);		__nsLoaderID = setInterval(this, "checkNSBytesLoaded", 10);		__videoPlayer.mcBuffer._visible = true;		__videoPlayer.mcVidController.mcPlayPause.gotoAndStop("play");		__ns.close();		__videoPlayer.vidObj.clear();		// initiate the load		__ns.play("tv/tale" + _vidNum + ".flv");// play			}		// handlers/listeners  ---------------------------------------------------------------------------					// end}
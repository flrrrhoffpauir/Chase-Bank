/** *	VidNav Class, Created 2007-10-05 *	Copyright (c) 2007 T3. All rights reserved. * *	@author Timothy Harold *	@version 1.0 *	*/import classes.Broadcaster;class classes.VidNav extends MovieClip{	// static properties				// private properties	private var __scope:MovieClip;	private var __broadcaster:Broadcaster;	private var __totalNavTiles:Number;	private var __maxNegY:Number;	private var __vidNavYCenter:Number = Stage.height / 2;	private var __easingAmt:Number = 12;	private var __scrollInterval:Number;	private var __lastArrow:MovieClip;	private var __currArrow:MovieClip;				// public properties	public var mcNavHolder:MovieClip;	public var mcNavArrows:MovieClip;				// Class constructor	/**	 * 	 *	 * @params xxxxx xxxxxxxxxxx	 */	function VidNav(_vidNav:MovieClip, _broadcaster:Broadcaster)	{		// reference to the vidnav MovieClip on the Stage		__scope = _vidNav;				// reference to the Broadcaster Class		__broadcaster = _broadcaster;				// register with the Broadcaster Class		__broadcaster.addEventListener("onTileClick", this, "onTileClick");				// hide all nav arrows		__scope.mcNavArrows.mcAllArrows.mcBothArrows._alpha = __scope.mcNavArrows.mcAllArrows.mcDownArrow._alpha = __scope.mcNavArrows.mcAllArrows.mcUpArrow._alpha = 0;	}				// private methods  ------------------------------------------------------------------------------		/**	 * 	 *	 * @param xxxx xxxxxxx	 */	private function startScroller():Void 	{		clearInterval(__scrollInterval);		__scrollInterval = setInterval(this, "scrollTiles", 33);	}			/**	 * 	 *	 * @param xxxx xxxxxxx	 */	private function scrollTiles():Void	{				var distanceToTravel:Number = __scope._ymouse - __vidNavYCenter;		if(__scope._xmouse >= __scope.mcNavHolder._x && __scope._xmouse <= 300)		{			//mcNavHolder._y = mcNavHolder._y  - distanceToTravel / __easingAmt;			__scope.mcNavHolder._y -= distanceToTravel / __easingAmt;			__scope.mcNavArrows.mcAllArrows._y = __scope._ymouse;			if(__scope.mcNavHolder._y > 0)			{				__scope.mcNavHolder._y = 0;			}			else if(__scope.mcNavHolder._y < __maxNegY)			{				__scope.mcNavHolder._y = __maxNegY;			}		}		if(__scope._xmouse >= __scope.mcNavHolder._x && __scope._xmouse <= 300)		{			if(__scope._ymouse > 0 && __scope._ymouse < 118)			{				__scope.mcNavArrows.mcAllArrows.mcBothArrows._alpha = __scope.mcNavArrows.mcAllArrows.mcUpArrow._alpha = 0;				__scope.mcNavArrows.mcAllArrows.mcDownArrow._alpha = 100;			}			else if(__scope._ymouse > 117 && __scope._ymouse < 231)			{				__scope.mcNavArrows.mcAllArrows.mcDownArrow._alpha = __scope.mcNavArrows.mcAllArrows.mcUpArrow._alpha = 0;				__scope.mcNavArrows.mcAllArrows.mcBothArrows._alpha = 100;			}			else if(__scope._ymouse > 230)			{				__scope.mcNavArrows.mcAllArrows.mcBothArrows._alpha = __scope.mcNavArrows.mcAllArrows.mcDownArrow._alpha = 0;				__scope.mcNavArrows.mcAllArrows.mcUpArrow._alpha = 100;			}		}		else		{			// hide all nav arrows			__scope.mcNavArrows.mcAllArrows.mcBothArrows._alpha = __scope.mcNavArrows.mcAllArrows.mcDownArrow._alpha = __scope.mcNavArrows.mcAllArrows.mcUpArrow._alpha = 0;		}	}		// public methods  -------------------------------------------------------------------------------	/**	 * 	 *	 * @param xxxx xxxxxxx	 */	public function xxxxxxxxxx():Void	{					}		// handlers/listeners  ---------------------------------------------------------------------------	/**	 * 	 *	 * @param xxxx xxxxxxx	 */	public function buildNavTiles(_infoObject:Object):Void	{		var newX:Number = 0;		var newY:Number = 0;		var stepHeight:Number = 84;				__totalNavTiles = _infoObject.data.firstChild.childNodes.length;		for(var i:Number = 0; i < __totalNavTiles; i++)		{			// instantiate a new tile			__scope.mcNavHolder.attachMovie("mcVidNavTile", "mcVidNavTile"+i, i, { _x:newX, _y:newY });						// set the id property			__scope.mcNavHolder["mcVidNavTile"+i].id = i;						// set the background color (alternate even/odd)			var bgColor:Number = (i % 2 == 1) ? 0xDDDDDD : 0xF2F2F2;			__scope.mcNavHolder["mcVidNavTile"+i].setBackgroundColor(bgColor);						// step the newY for the next instantiation			newY += stepHeight;						// load the tile with data			__scope.mcNavHolder["mcVidNavTile"+i].setDataAndLoad(_infoObject.data.firstChild.childNodes[i].attributes.thumbPath, _infoObject.data.firstChild.childNodes[i].attributes.vidPath, _infoObject.data.firstChild.childNodes[i].attributes.name, _infoObject.data.firstChild.childNodes[i].attributes.air_date, _infoObject.data.firstChild.childNodes[i].attributes.time);						// reference the Broadcaster inside the tile			__scope.mcNavHolder["mcVidNavTile"+i].broadcaster = __broadcaster;					}				// set up the max neg Y based on the height of the loaded mav holder		__maxNegY = Stage.height - (__scope.mcNavHolder._height + 70);				// start the scroller		startScroller();				// autostart video with the default video number 0 (or if a vid number was passed to the MainTimeline load that one!)		var autostartNum:Number = (__scope._parent.vid == undefined) ? 0 : __scope._parent.vid;		__broadcaster.dispatchEvent("onTileClick", __scope.mcNavHolder["mcVidNavTile"+ autostartNum]);	}		/**	 * 	 *	 * @param xxxx xxxxxxx	 */	public function onTileClick(infoObject:Object):Void	{		//trace("VidNav - onTileClick:  " + infoObject.data + " id: " + infoObject.data.id);		// ativate all the tiles and then disable the clicked		for(var i:Number = 0; i < __totalNavTiles; i++)		{			if(__scope.mcNavHolder["mcVidNavTile" + i].id != infoObject.data.id)			{				__scope.mcNavHolder["mcVidNavTile" + i].activate();			}		}		__scope.mcNavHolder["mcVidNavTile" + infoObject.data.id].deactivate();	}				// end}
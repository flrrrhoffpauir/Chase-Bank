/*** *  Broadcaster Class, Created 2007-10-05 *	Copyright (c) 2007 T3. All rights reserved. * *	@author Timothy Harold *	@version 1.0 **/class classes.Broadcaster{	// constants				// public properties				// private properties	private var __arr_listeners:Array; // hold references to the objects				// Constructor  -------------------------------------------------------------------------------	/**	 *	 *	 */	function Broadcaster()	{		init();	}	// private methods  ---------------------------------------------------------------------------	/**	 *	 *	 */	private function init():Void	{		// cleanse the Array		__arr_listeners = []; 	}			private function showListeners():Void	{		var len:Number = __arr_listeners.length; // get the length now rather than bog down the for loop		for(var i:Number = 0; i < len; i++)		{			trace(i + " - event: " + __arr_listeners[i].event + "  listener: " + __arr_listeners[i].listener + "  mappedTo: " + __arr_listeners[i].mappedTo);		}	}			// public methods  ----------------------------------------------------------------------------	/**	 *  Adds an Object, an event, and a handler to the watch list.	 *	 *  @params _event The event to register for the Object.     *  @params _listener The Object to register for the event.	 *  @params _mappedTo The Function that will be called upon notification of the event.	 */	public function addEventListener(_event:String, _listener:Object, _mappedTo:String):Boolean	{		var ev:String;		var li:Object;		// check to see if the Object has already been registered		for(var i in __arr_listeners)		{			ev = __arr_listeners[i].event;			li = __arr_listeners[i].listener;			// if it has, exit			if(ev == _event && li == _listener) { return false; };		}		// ... if it hasn't, then register it now		__arr_listeners.push({ event:_event, listener:_listener, mappedTo:_mappedTo });		//showListeners(); // TESTING **************		return true;	}		/**	 *  Removes an Object, it's event, and it's handler from the watch list.	 *	 *  @params _event The event previously registered to the Object.     *  @params _listener The Object previously added to the watch list.	 */	public function removeEventListener(_event:String, _listener:Object):Boolean	{		var ev:String;		var li:Object;		var len:Number = __arr_listeners.length; // get the length now rather than bog down the for loop		for(var i:Number = 0; i < len; i++)		{			ev = __arr_listeners[i].event;			li = __arr_listeners[i].listener;			// if the Object is in the list, remove it			if(ev == _event && li == _listener) { __arr_listeners.splice(i, 1); return true; };		}		// otherwise, just shut down now		return false;	}		/**	 *  Used to inform listeners when an event has occurred.	 *	 *  @params _event The name of the event.     *  @params _data The additional parameters to be sent to the registered Function. 	 */	public function dispatchEvent(_event:String, _data:Object):Void	{		// place information into an object		var evtObj:Object = { type:_event, data:_data };		// find Objects registered to hear this event		for(var i:String in __arr_listeners)		{			if(__arr_listeners[i].event == _event)			{				// if the Function has the same name as the event				//__arr_listeners[i].listener[_event](evtObj);				// if the Function has a unique name defined in the mappedTo property				__arr_listeners[i].listener[__arr_listeners[i].mappedTo](evtObj);			}		}		// [OPTIONAL] after all Objects have been notified, call the Broadcaster's eventHandler		//this[_event + "Handler"](evtObj);	}				// getter/setter methods  ---------------------------------------------------------------------						// handlers  ----------------------------------------------------------------------------------						//end}
/** *	all code copyright (c) 2008 T3 The Think Tank. All rights reserved. *	Re-use of this code without express written permission is prohibited. */package application{	// import flash	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.net.*;	import flash.utils.Timer;	import flash.utils.getTimer;	import flash.text.TextField;	import flash.external.ExternalInterface;	import flash.system.Security;		// xml	import flash.net.URLLoader;	import application.jason.safeDomain;		// import external	import application.models.Model;	import application.events.SlideShowEvent;	import gs.*;	import gs.easing.*;	import gs.plugins.*;				public class App extends MovieClip	{				//---------------------------------------------------------------------		// variables		//---------------------------------------------------------------------				private var _model:Model;				private var _totalNavItems:Number = 0;		private var _lastBtnX:Number = 656;		private var _btnSpacing:Number = 20;		private var _pauseTime:Number;		private var _isPaused:Boolean = false;		private var _loader:Loader;		private var _preloader:MovieClip;		public var _pauseButton:MovieClip;		private var _accessibility:String;		private var _timer:Timer;		private var _timerHasStarted:Boolean = false;		private var _xmlData:XML;				private var _currImage:Number;		private var _prevImage:Number;		private var _imgContainer0:MovieClip;		private var _imgContainer1:MovieClip;		private var _currContainer:MovieClip;		private var _prevContainer:MovieClip;				// static properties		private static var PAUSE_ID:Number = 5;		private static var SPEED:Number = 1;		private static var EASE:Function = Expo.easeOut;				private static var TESTING:Boolean = true;				// parameters from the html file		public var xmlID:String;				public var ai:String;		public var rootPath:String;				public var _xml:XML;				//---------------------------------------------------------------------		// constructor		//---------------------------------------------------------------------		public function App()		{			addEventListener(SlideShowEvent.MODEL_READY, makeNav, false, 0, true);						if(TESTING)			{				// standalone testing				xmlID = "data/mt1_home_data_test.xml"; 				rootPath = "content/"; 				ai = "823";			} else {				// loading info from html parameters				xmlID = root.loaderInfo.parameters.xml_data;				ai = root.loaderInfo.parameters.AI;				rootPath = root.loaderInfo.parameters.Root;			};						//testTxt.text = rootPath +"  "+ai;						loadXMLFileURL();		};				//---------------------------------------------------------------------		// private methods and handlers		//---------------------------------------------------------------------				// -- load XML --------------------------------------------------------		private function loadXMLFileURL():void		{			var loader:URLLoader;			if(TESTING)			{				// standalone testing				loader = new URLLoader(new URLRequest("data/flash_domains.xml"));			} else {				loader = new URLLoader(new URLRequest(rootPath+"content/ecpweb/loyalty/document/flash_domains.xml"));			}			loader.addEventListener(Event.COMPLETE,loadedCompleteHandler);			//trace("loadCMLFileURL "+rootPath+" <- rootPath | ai -> "+ai);		};						private function loadedCompleteHandler(e:Event):void		{			_xml = XML(e.target.data);						if(safeDomain.test_URL(xmlID, _xml) && safeDomain.test_URL(rootPath, _xml) && test_ai(ai) )			{				// trace("######## "+ _xml +" ##########");				_model = new Model(xmlID);				// trace("true safeDoamin ");			} else {				_model = new Model(rootPath+"content/ecpweb/loyalty/document/error_catch_data.xml")				// trace("false safeDoamin");			};						addChild(_model);			_model.init();		};				public function test_ai(val):Boolean		{			if (!isNaN(Number(val)))          		return true;			else			    return false;		};						private function makeNav(e:SlideShowEvent):void		{			_totalNavItems = e.data.nav.navitem.length();			_accessibility = e.data.accessibility;			_pauseTime = e.data.pausetime;						buildNav(e.data);		};						private function pauseShow(e:SlideShowEvent):void		{			trace("pause show");			if(_totalNavItems > 1 && _timer.running) _timer.stop();		};						private function resumeShow(e:SlideShowEvent):void		{			trace("resume show");			restartTimer();		};						private function rollover(e:MouseEvent):void		{			// trace(e.type + " " + e.target + " id: " + e.target.id);		};						private function rollout(e:MouseEvent):void		{			// trace(e.type + " " + e.target + " id: " + e.target.id);		};						private function clicked(e:MouseEvent):void		{			// trace(e.type + " " + e.target + " id: " + e.target.parent.id);					if(_timer) _timer.stop();			highlightNav(e.target.id);			showImage(e.target.id);			trace(e.target);		};						private function pauseClicked(e:MouseEvent):void		{			// trace(e.type + " " + e.target + " id: " + e.target.parent.id);						if(_isPaused == false)			{				_isPaused = true;				_timer.stop();				TweenLite.to(_pauseButton.grey, SPEED, { alpha:0, ease:EASE });			} else {				_isPaused = false;				restartTimer();								TweenLite.to(_pauseButton.grey, SPEED, { alpha:1, ease:EASE });			};		};						private function buildNav(xmlData:XML):void		{			_xmlData = xmlData;						if(_totalNavItems > 1)			{				_pauseButton = new Pause() as MovieClip;				_pauseButton.x = _lastBtnX + _btnSpacing;				_pauseButton.y = 275;				_pauseButton.id = PAUSE_ID;				_pauseButton.addEventListener(MouseEvent.CLICK, pauseClicked, false, 0, true);				_pauseButton.buttonMode = true;				addChild(_pauseButton);				for(var i:Number = _totalNavItems-1; i > -1; i--)				{					var mc:MovieClip = new NavButton();					mc.name = "nav" + i;					mc.id = i;					mc.txt.text = mc.shadow.text = i+1;					mc.mouseChildren = false;					mc.buttonMode = true;					mc.x = _lastBtnX;					mc.y = 275;					mc.addEventListener(MouseEvent.ROLL_OVER, rollover, false, 0, true);					mc.addEventListener(MouseEvent.ROLL_OUT, rollout, false, 0, true);					mc.addEventListener(MouseEvent.CLICK, clicked, false, 0, true);					addChild(mc);										_lastBtnX -= _btnSpacing;				};			} else {							_totalNavItems = 1;				_isPaused = true;			};						_imgContainer0 = new MovieClip();			_imgContainer1 = new MovieClip();			this.addChild(_imgContainer0);			this.addChild(_imgContainer1);			_imgContainer0.name = "imgContainer0";			_imgContainer1.name = "imgContainer1";			setChildIndex(_imgContainer0, 2);			setChildIndex(_imgContainer1, 3);					_currContainer = _imgContainer1;						showImage(0);						loadAccessibility();		};						private function highlightNav(id:Number):void		{			var nav:MovieClip;			for(var i:Number = 0; i < _totalNavItems; i++)			{				nav = MovieClip(getChildByName("nav" + i));				if(i == id)				{					TweenLite.to(nav.grey, SPEED, { alpha:0, ease:EASE });					nav.removeEventListener(MouseEvent.ROLL_OVER, rollover, false);					nav.removeEventListener(MouseEvent.ROLL_OUT, rollout, false);					nav.removeEventListener(MouseEvent.CLICK, clicked, false);				} else {					TweenLite.to(nav.grey, SPEED, { alpha:1, ease:EASE });					nav.addEventListener(MouseEvent.ROLL_OVER, rollover, false, 0, true);					nav.addEventListener(MouseEvent.ROLL_OUT, rollout, false, 0, true);					nav.addEventListener(MouseEvent.CLICK, clicked, false, 0, true);				};			};		};						private function makeHotspot():void		{			var hs:MovieClip = new MovieClip();			hs.name = "hotspot";						var hotSpotLink:String = safeDomain.containerLinks(rootPath, _xmlData.nav.navitem[_currImage].hotspot.url, _xml);			var xmlUrl:String = hotSpotLink;			var aiUrl:String;			var newWin:String = _xmlData.nav.navitem[_currImage].hotspot.openWin;									if(xmlUrl.indexOf('?',0) != -1)				aiUrl = xmlUrl + "&AI=" + ai;			else if(xmlUrl.charAt(xmlUrl.length-1) == '/')				aiUrl = xmlUrl;			else				aiUrl = xmlUrl + "?AI=" + ai;							hs.urlString = xmlUrl;//aiUrl; // <-------- updated this call for the url			hs.win = newWin;			hs.x = _xmlData.nav.navitem[_currImage].hotspot.x_coord;			hs.y = _xmlData.nav.navitem[_currImage].hotspot.y_coord;						// trace(hs.x +" <- x  y -> "+ hs.y);						// -- hotspot fill -----			var hsArea:MovieClip = new MovieClip();			hsArea.graphics.beginFill(0x00FF00);        	hsArea.graphics.drawRect(0, 0, _xmlData.nav.navitem[_currImage].hotspot.width, _xmlData.nav.navitem[_currImage].hotspot.height);         	hsArea.graphics.endFill();			hs.addChild(hsArea);						hs.alpha = (_xmlData.nav.navitem[_currImage].hotspot.visible == "true") ? 1 : 0;			hs.buttonMode = true;			hs.mouseChildren = false;			hs.addEventListener(MouseEvent.ROLL_OVER, hotspotRollover, false, 0, true);			hs.addEventListener(MouseEvent.ROLL_OUT, hotspotRollout, false, 0, true);			hs.addEventListener(MouseEvent.CLICK, hotspotReleased, false, 0, true);									_currContainer.addChildAt(hs, 1);			};						private function hotspotReleased(e:Event):void		{			trace("punch");			var req:URLRequest = new URLRequest(e.target.urlString);						var openWindow:String = e.target.win;						if(openWindow == "true")			{				trace("url:", req.url);				navigateToURL(req, "_blank");			} else if(safeDomain.test_URL(e.target.urlString, _xml) == true) {				trace("* url:", req.url);				navigateToURL(req, "_self");			};		};								private function addListeners(e:Event):void		{			var mc:* = e.target.loader.content;						if(mc is MovieClip)			{				if(mc["_tlv"])				{					mc["_tlv"].addEventListener(SlideShowEvent.PAUSE_SHOW, pauseShow);					mc["_tlv"].addEventListener(SlideShowEvent.RESUME_SHOW, resumeShow);				}				if(mc["_rb"])				{					mc["_rb"].addEventListener(SlideShowEvent.PAUSE_SHOW, pauseShow);					mc["_rb"].addEventListener(SlideShowEvent.RESUME_SHOW, resumeShow);				};			};		};						private function showImage(id:Number):void		{			if(_totalNavItems > 1) highlightNav(id);			_prevImage = _currImage;			_currImage = id;						_prevContainer = _currContainer;						// change _currContainer accordingly. Swap depths of _imgContainers			_currContainer = (_currContainer == _imgContainer1) ? _imgContainer0 : _imgContainer1;			_currContainer.alpha = 0;						swapChildren(_imgContainer1, _imgContainer0);									_loader	= new Loader();			_loader.contentLoaderInfo.addEventListener(Event.OPEN, showPreloader);			_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, initImage);						_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, addListeners);						// remove any children of the current container						for(var i:Number = _currContainer.numChildren-1; i > -1; i--)			{				// trace("currContainer getChildAt i name:", _currContainer.getChildAt(i).name);				_currContainer.removeChildAt(i);			};						var heroContainer:MovieClip = new MovieClip();			_currContainer.addChildAt(heroContainer, 0);			heroContainer.name = "heroHolder";						heroContainer.addChild(_loader);									_loader.load(new URLRequest(rootPath + _xmlData.nav.navitem[id].image));					};						private function initImage(e:Event):void		{				makeHotspot();						TweenMax.to(_currContainer, SPEED, { alpha:1, ease:EASE, onComplete:removeChildFromPrevContainer, onCompleteScope:this });									TweenLite.to(_preloader, SPEED/2, { alpha:0, ease:EASE, onComplete:removeObjectFromDisplayList, onCompleteParams:[_preloader] });						if(_isPaused != true && _totalNavItems > 1)			{				if(_timerHasStarted == false)				{					startTimer();				} else {					restartTimer();				};			};						var tempMC:* = _currContainer.getChildAt(0);									resetImage(tempMC);			playImage(tempMC);		};						private function playImage(mc:*):void		{			if(mc is MovieClip && mc["_tlv"])			{				_timer.stop();				mc.gotoAndPlay("start");				mc.play();			} else {				restartTimer();			};						// init Hero SWF Links <-----------------------						// can't use this because then the listeners for rollover buttons won't work			// if(mc is MovieClip) Object(_loader.content).init(rootPath, ai, _xml);		};						private function resetImage(mc:*):void		{			if(mc is MovieClip && mc["_tlv"]) mc.gotoAndStop(0);		};						private function showNextImage(e:Event):void		{			_timer.stop();			var id:Number = (_currImage < _totalNavItems-1) ? _currImage + 1 : 0;			if(_isPaused != true) showImage(id);		};						private function showPreloader(e:Event):void		{			_preloader = new PreloaderClip();			_preloader.x = 358;			_preloader.y = 150;			_preloader.alpha = 0;			addChild(_preloader);		};						private function startTimer():void		{			_timer = new Timer(_pauseTime*1000);			_timer.addEventListener(TimerEvent.TIMER, showNextImage);			_timer.start();			_timerHasStarted = true;		};				private function restartTimer():void { if(_totalNavItems > 1) _timer.start(); };			private function loadAccessibility():void { accessibility.text = _accessibility; };		private function removeObjectFromDisplayList(obj:MovieClip):void { if(this.contains(obj)) removeChild(obj); };		private function hotspotRollover(e:MouseEvent):void { pauseShow(new SlideShowEvent(SlideShowEvent.PAUSE_SHOW)); };		private function hotspotRollout(e:MouseEvent):void { resumeShow(new SlideShowEvent(SlideShowEvent.RESUME_SHOW)); };				private function removeChildFromPrevContainer():void 		{ 			for(var i:Number = _prevContainer.numChildren-1; i > -1; i--)			{				// trace("prevContainer getChildAt i name:", _prevContainer.getChildAt(i).name);				_prevContainer.removeChildAt(i);			};		};			};	}; // end
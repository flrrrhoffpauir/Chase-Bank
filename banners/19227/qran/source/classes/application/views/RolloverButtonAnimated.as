/** *	RolloverButtonAnimated Class * *	@langversion ActionScript 3.0 *	@playerversion 9.0 *	@since 2010-03-11                       *	@author Junie *	@version 1.0.0 * *	all code copyright (c) 2009 T3 The Think Tank. All rights reserved. *	Re-use of this code without express written permission is prohibited. *	 */package application.views{	// import flash	import flash.display.*;	import flash.events.*;	import flash.external.*;    import flash.utils.*;	import flash.net.URLRequest;	import flash.net.navigateToURL;	// import external	import gs.*;	import gs.easing.*;	import gs.plugins.*;			import application.events.SlideShowEvent;	public class RolloverButtonAnimated extends MovieClip	{		//---------------------------------------------------------------------		// variables		//---------------------------------------------------------------------		private var _scope:MovieClip;		private var _numOfRollovers:Number;		private var _bannerID:Number;		private var _linkArray:Array;		private var _mcArray:Array;		private var _currRollover:Number;		private var _timer:Timer;                static private var SPEED:Number = 0.7;        static private var EASE:Function = Expo.easeOut;		static private var PAUSE_TIME:Number = 3;        		//---------------------------------------------------------------------		// constructor		//---------------------------------------------------------------------		public function RolloverButtonAnimated(scope:MovieClip, numOfRollovers:Number, bannerID:Number, linkArray:Array)		{			_scope 				= scope;			_numOfRollovers 	= numOfRollovers;			_bannerID 			= bannerID;			_linkArray 			= linkArray;			_currRollover		= -1;			_mcArray 			= [];						addEventListener(Event.ADDED_TO_STAGE, init);		};						//---------------------------------------------------------------------		// private methods and handlers		//---------------------------------------------------------------------				private function init(e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, init);						_scope.headline3.alpha = 0;			_scope.headline3.y += 30;			_scope.instructions.alpha = 0;						// using _bannerID for headline clips			var num:Number;			switch(_bannerID)			{				case 1:					num = 3;				break;								case 2:					num = 2;				break;			};						var mc:MovieClip;			var dlay:Number = .5;			for(var j:Number = 0; j < num; j++)			{				// -- init headline clips								mc = MovieClip(_scope.getChildByName("headline"+j));				TweenMax.from(mc, SPEED, { y:"30", alpha:0, delay:dlay, ease:EASE });				dlay += .2;			};						var rollover:MovieClip;			for(var i:Number = 0; i < _numOfRollovers; i++)			{				// -- init rollover clips												rollover = MovieClip(_scope.getChildByName("rollover"+i));				rollover.linkhs0.link = _linkArray[i][0];				rollover.id = i;				rollover.alpha = 0;				rollover.y += 30;				rollover.btn.blue.alpha = 0;								rollover.linkhs0.addEventListener(MouseEvent.CLICK, checkRelease);				rollover.linkhs0.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);				rollover.linkhs0.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);				//rollover.linkhs0.tabIndex = i;				rollover.linkhs0.buttonMode = true;								if(_bannerID == 1)				{					if(i == 0)					{						rollover.linkhs1.link = _linkArray[i][1];						rollover.linkhs1.addEventListener(MouseEvent.CLICK, checkRelease);						rollover.linkhs1.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);						rollover.linkhs1.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);						rollover.linkhs1.buttonMode = true;						//rollover.linkhs1.tabIndex = 0.5;					};				};								_mcArray[i] = rollover;			};						TweenMax.delayedCall(3, showSecondFrame, null);		};				private function focusInHandler(e:FocusEvent):void {			// pause the slide show						dispatchEvent(new SlideShowEvent(SlideShowEvent.PAUSE_SHOW));						if(_timer.running)			{				normalizeRollovers(MovieClip(e.target.parent));				_timer.stop();			};						showRollover(MovieClip(e.target.parent));		};				private function focusOutHandler(e:FocusEvent):void {			// resume the slide show			dispatchEvent(new SlideShowEvent(SlideShowEvent.RESUME_SHOW));						hideRollover(MovieClip(e.target.parent));		};						private function showSecondFrame():void		{			dispatchEvent(new SlideShowEvent(SlideShowEvent.PAUSE_SHOW));						TweenMax.to(_scope.headline0, SPEED, { alpha:0, y:"-30", ease:EASE });			TweenMax.to(_scope.headline1, SPEED, { alpha:0, y:"-30", ease:EASE });			if(_bannerID == 1) TweenMax.to(_scope.headline2, SPEED, { alpha:0, y:"-30", ease:EASE });												TweenMax.to(_scope.headline3, SPEED, { alpha:1, y:"-30", ease:EASE });			TweenMax.to(_scope.instructions, SPEED, { alpha:1, ease:EASE });						var dlay:Number = .5;			var mc:MovieClip;			for(var i:Number = 0; i < _numOfRollovers; i++)			{				mc = MovieClip(_scope.getChildByName("rollover"+i));				TweenMax.to(mc, SPEED, { alpha:1, y:"-30", delay:dlay, ease:EASE });				dlay += .2;								mc.addEventListener(MouseEvent.ROLL_OVER, checkRollOver);				mc.addEventListener(MouseEvent.ROLL_OUT, checkRollOut);				mc.tabEnabled = false;				//mc.addEventListener				mc.hitArea = mc.hs;								if(i == 0)				{					mc.buttonMode = false;					mc.useHandCursor = false;					// mc.mouseChildren = false;				} else {					mc.buttonMode = true;					mc.useHandCursor = true;				};								mc.body.alpha = 0;				mc.body.visible = false;								if(i == _numOfRollovers - 1) startTimer();			};		};						private function checkRollOver(e:MouseEvent):void		{			// pause the slide show						dispatchEvent(new SlideShowEvent(SlideShowEvent.PAUSE_SHOW));						if(_timer.running)			{				normalizeRollovers(MovieClip(e.target));				_timer.stop();			};						showRollover(MovieClip(e.target));		};						private function checkRollOut(e:MouseEvent):void		{						// resume the slide show			dispatchEvent(new SlideShowEvent(SlideShowEvent.RESUME_SHOW));						hideRollover(MovieClip(e.target));				};						private function checkRelease(e:MouseEvent):void		{			hideRollover(e.target.parent);			if(e.currentTarget.link != "")			{				var req:URLRequest = new URLRequest(e.currentTarget.link);				navigateToURL(req, "_self");			};		};				private function selectRolloverFromTimer(e:TimerEvent):void		{			if(_currRollover == _numOfRollovers - 1)			{				_timer.stop();				dispatchEvent(new SlideShowEvent(SlideShowEvent.RESUME_SHOW));				hideRollover(_mcArray[_numOfRollovers-1]);			} else {				if(_currRollover != -1) hideRollover(_mcArray[_currRollover]);				_currRollover += 1;				showRollover(_mcArray[_currRollover]);			};		};						private function startTimer():void		{			_timer = new Timer(PAUSE_TIME * 3000);			_timer.addEventListener(TimerEvent.TIMER, selectRolloverFromTimer);			_timer.start();		};				private function normalizeRollovers(ro:MovieClip):void		{						var mc:MovieClip;			for(var i:Number = 0; i < _numOfRollovers; i++)			{				mc = _mcArray[i];				if(ro != mc) hideRollover(mc);			};		};        		private function showRollover(mc:MovieClip):void		{			TweenMax.to(mc.body, SPEED*2, { alpha:1, ease:EASE });			TweenMax.to(mc.btn.blue, SPEED, { alpha:1, ease:EASE });			mc.mouseChildren = true;			mc.body.visible = mc.body.mouseChildren = true;					mc.hs.gotoAndStop(2);			mc.hitArea = mc.hs;		};						private function hideRollover(mc:MovieClip):void		{			TweenMax.to(mc.body, SPEED, { autoAlpha:0, ease:EASE });			TweenMax.to(mc.btn.blue, SPEED, { alpha:0, ease:EASE });			mc.mouseChildren = false;			mc.body.mouseEnabled = false;			mc.hs.gotoAndStop(1);			mc.hitArea = mc.hs;		};		//*/			};	}; // end
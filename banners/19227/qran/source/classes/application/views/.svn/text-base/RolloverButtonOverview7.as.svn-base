/** *	RolloverButtonOverview Class * *	@langversion ActionScript 3.0 *	@playerversion 9.0 *	@since 2009-09-04                       *	@author Junie *	@version 1.0.0 * *	all code copyright (c) 2009 T3 The Think Tank. All rights reserved. *	Re-use of this code without express written permission is prohibited. *	 */package application.views{	// import flash	import flash.display.*;	import flash.events.*;	import flash.external.*;    import flash.utils.*;	import flash.net.URLRequest;	import flash.net.navigateToURL;	// import external	import gs.*;	import gs.easing.*;		import application.events.SlideShowEvent;	public class RolloverButtonOverview7 extends MovieClip	{		//---------------------------------------------------------------------		// variables		//---------------------------------------------------------------------		private var _scope:MovieClip;		private var _numOfPanels:Number;		private var _linkArray:Array;		private var _bannerID:Number;                private var _tweenTime:Number = 0.7;        private var _easeType:Function = Expo.easeOut;		private var _lastOpened:MovieClip;		private var _currentlyOpen:MovieClip;        		//---------------------------------------------------------------------		// constructor		//---------------------------------------------------------------------		public function RolloverButtonOverview7(scope:MovieClip, numOfPanels:Number, bannerID:Number, linkArray:Array)		{			_scope = scope;			_numOfPanels = numOfPanels;			trace(_numOfPanels);			_bannerID = bannerID;			_linkArray = linkArray;						initPanels();		};				private function focusInHandler(e:FocusEvent):void {			open(e.target.parent);		}				private function focusOutHandler(e:FocusEvent):void {			shut(e.target.parent);		}				private function open(m:MovieClip):void {			// pause the slide show			dispatchEvent(new SlideShowEvent(SlideShowEvent.PAUSE_SHOW));						trace("rollover on button");						_scope.setChildIndex(m, _scope.numChildren - 1);																		// show the buttonGlow		    TweenLite.to(m.btn.buttonGlow, _tweenTime, { alpha:1.0, ease:_easeType });			// hide gray button			TweenLite.to(m.btn.gray, _tweenTime/2, { alpha:0, ease:_easeType });						// show blue button			TweenLite.to(m.btn.blue, _tweenTime/2, { alpha:1, ease:_easeType });						// expand the panel			m.gotoAndPlay("open");		}				private function shut(m:MovieClip):void {			// resume the slide show			dispatchEvent(new SlideShowEvent(SlideShowEvent.RESUME_SHOW));								// collapse the panel			m.gotoAndPlay("close");						// hide the buttonGlow		    TweenLite.to(m.btn.buttonGlow, _tweenTime, { alpha:0.0, ease:_easeType });			// show gray button			TweenLite.to(m.btn.gray, _tweenTime/2, { alpha:1, ease:_easeType });						// hide blue button			TweenLite.to(m.btn.blue, _tweenTime/2, { alpha:0, ease:_easeType });		}				//---------------------------------------------------------------------		// private methods and handlers		//---------------------------------------------------------------------		private function initPanels():void		{			var mc:MovieClip;			for(var i:Number = 1; i < _numOfPanels+1; i++)			{				mc = MovieClip(_scope.getChildByName("panel"+i));				mc.link1.link = _linkArray[i-1][0];				mc.btn.buttonGlow.alpha = 0.0;				mc.btn.blue.alpha = 0.0;				mc.addEventListener(MouseEvent.ROLL_OVER, rollOver);				mc.addEventListener(MouseEvent.ROLL_OUT, rollOut);				mc.link1.addEventListener(MouseEvent.CLICK, release);				mc.link1.buttonMode = mc.useHandCursor = true;				mc.link1.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler, false, 0, true);				mc.link1.addEventListener(FocusEvent.FOCUS_IN, focusInHandler, false, 0, true); 								if(i == 2) {					mc.link2.link = _linkArray[i-1][1];					mc.link2.addEventListener(MouseEvent.CLICK, release);					mc.link2.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler, false, 0, true);					mc.link2.addEventListener(FocusEvent.FOCUS_IN, focusInHandler, false, 0, true);					mc.link2.buttonMode = true;				};						};		};						private function rollOver(e:MouseEvent):void		{			// pause the slide show			dispatchEvent(new SlideShowEvent(SlideShowEvent.PAUSE_SHOW));						trace("rollover on button");						_scope.setChildIndex(MovieClip(e.currentTarget), _scope.numChildren - 1);																		// show the buttonGlow		    TweenLite.to(e.currentTarget.btn.buttonGlow, _tweenTime, { alpha:1.0, ease:_easeType });			// hide gray button			TweenLite.to(e.currentTarget.btn.gray, _tweenTime/2, { alpha:0, ease:_easeType });						// show blue button			TweenLite.to(e.currentTarget.btn.blue, _tweenTime/2, { alpha:1, ease:_easeType });						// expand the panel			e.currentTarget.gotoAndPlay("open");		};						private function rollOut(e:MouseEvent):void		{			// resume the slide show			dispatchEvent(new SlideShowEvent(SlideShowEvent.RESUME_SHOW));								// collapse the panel			e.currentTarget.gotoAndPlay("close");						// hide the buttonGlow		    TweenLite.to(e.currentTarget.btn.buttonGlow, _tweenTime, { alpha:0.0, ease:_easeType });			// show gray button			TweenLite.to(e.currentTarget.btn.gray, _tweenTime/2, { alpha:1, ease:_easeType });						// hide blue button			TweenLite.to(e.currentTarget.btn.blue, _tweenTime/2, { alpha:0, ease:_easeType });					};						private function release(e:MouseEvent):void		{			if(e.currentTarget.link != "")			{				var req:URLRequest = new URLRequest(e.currentTarget.link);								if(e.currentTarget.id == 1) {					navigateToURL(req, "_blank");				} else {					navigateToURL(req, "_self");				};			}		};						/*		private function swapPanelDepths(mc0:String, mc1:String):void		{			_scope.swapChildren(_scope.getChildByName(mc0), _scope.getChildByName(mc1));		};		//*/	};}; // end
/** *	RolloverButtonTravel Class * *	@langversion ActionScript 3.0 *	@playerversion 9.0 *	@since 2010-01-14                       *	@author Junie *	@version 1.0.0 * *	all code copyright (c) 2009 T3 The Think Tank. All rights reserved. *	Re-use of this code without express written permission is prohibited. *	 */package application.views{	// import flash	import flash.display.*;	import flash.events.*;	import flash.external.*;    import flash.utils.*;	import flash.net.URLRequest;	import flash.net.navigateToURL;	// import external	import gs.*;	import gs.easing.*;	import gs.plugins.*;			import application.events.SlideShowEvent;	public class RolloverButtonTravel extends MovieClip	{		//---------------------------------------------------------------------		// variables		//---------------------------------------------------------------------		private var _scope:MovieClip;		private var _numOfPanels:Number;		private var _bannerID:Number;		private var _linkArray:Array;		private var _mcArray:Array;		private var _currPanel:Number;		private var _timer:Timer;                static private var SPEED:Number = 0.7;        static private var EASE:Function = Expo.easeOut;		static private var PAUSE_TIME:Number = 3;        		//---------------------------------------------------------------------		// constructor		//---------------------------------------------------------------------		public function RolloverButtonTravel(scope:MovieClip, numOfPanels:Number, bannerID:Number, linkArray:Array)		{			_scope 				= scope;			_numOfPanels 		= numOfPanels;			_bannerID 			= bannerID;			_linkArray 			= linkArray;			_mcArray 			= [];						TweenPlugin.activate([TintPlugin]);						init();		};						//---------------------------------------------------------------------		// private methods and handlers		//---------------------------------------------------------------------				private function init():void		{			var rollover:MovieClip;			var panel:MovieClip;			for(var i:Number = 0; i < _numOfPanels; i++)			{				// -- init rollover clips												rollover = MovieClip(_scope.getChildByName("rollover"+i));				rollover.link = _linkArray[i];				rollover.id = i;				rollover.bg.alpha = 0;											rollover.addEventListener(MouseEvent.ROLL_OVER, rollOver);				rollover.addEventListener(MouseEvent.ROLL_OUT, rollOut);				rollover.addEventListener(MouseEvent.CLICK, release);				rollover.addEventListener(FocusEvent.FOCUS_IN, focusInHandler, false, 0, true);				rollover.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler, false, 0, true);								rollover.buttonMode = rollover.useHandCursor = true;												// -- init panel clips															panel = MovieClip(_scope.getChildByName("panel"+i));				panel.link = _linkArray[i];				panel.id = i;				panel.alpha = 0;								panel.addEventListener(MouseEvent.ROLL_OVER, rollOverPanel);				panel.addEventListener(MouseEvent.ROLL_OUT, rollOut);				panel.addEventListener(MouseEvent.CLICK, release);				//rollover.addEventListener(FocusEvent.FOCUS_IN, focusInHandler, false, 0, true);				//rollover.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler, false, 0, true);								//panel.buttonMode = panel.useHandCursor = true;												// store each type in an array								_mcArray[i] = [rollover, panel];							};						// select panel 0 as default							selectPanel(0);						TweenMax.delayedCall(.05, dispatchEvent, [new SlideShowEvent(SlideShowEvent.PAUSE_SHOW)]);						startTimer();		};				private function focusInHandler(e:FocusEvent):void {			// pause the slide show			dispatchEvent(new SlideShowEvent(SlideShowEvent.PAUSE_SHOW));						if(_timer.running) _timer.stop();			selectPanel(e.currentTarget.id);		}				private function focusOutHandler(e:FocusEvent):void {			// resume the slide show			dispatchEvent(new SlideShowEvent(SlideShowEvent.RESUME_SHOW));		}						private function selectPanel(num:Number):void		{			_currPanel = num;						var a:Number = 0;			for(var i:Number = 0; i < _numOfPanels; i++)			{				if(num == i)				{					a = 1;					_scope.setChildIndex(_mcArray[i][0], _scope.numChildren - 1);					TweenLite.to(_mcArray[i][0].btn.buttonGlow, SPEED, { alpha:1, ease:EASE });					TweenLite.to(_mcArray[i][0].btn.gray, SPEED, { alpha:0, ease:EASE });					if(_bannerID == 2) TweenLite.to(_mcArray[i][0].txt, SPEED, { tint:0x5D5D5D, ease:EASE });				} else {					a = 0;					TweenLite.to(_mcArray[i][0].btn.buttonGlow, SPEED, { alpha:0, ease:EASE });					TweenLite.to(_mcArray[i][0].btn.gray, SPEED, { alpha:1, ease:EASE });					if(_bannerID == 2)  TweenLite.to(_mcArray[i][0].txt, SPEED, { tint:0xFFFFFF, ease:EASE });				};				TweenMax.to(_mcArray[i][0].bg, SPEED, { alpha:a, ease:EASE });				TweenMax.to(_mcArray[i][1], SPEED, { alpha:a, ease:EASE });			};		};						private function rollOver(e:MouseEvent):void		{			// pause the slide show			dispatchEvent(new SlideShowEvent(SlideShowEvent.PAUSE_SHOW));						if(_timer.running) _timer.stop();			selectPanel(e.currentTarget.id);					};						private function rollOverPanel(e:MouseEvent):void		{			// pause the slide show			dispatchEvent(new SlideShowEvent(SlideShowEvent.PAUSE_SHOW));						if(_timer.running) _timer.stop();		}						private function rollOut(e:MouseEvent):void		{			// resume the slide show			dispatchEvent(new SlideShowEvent(SlideShowEvent.RESUME_SHOW));		};						private function release(e:MouseEvent):void		{			if(e.currentTarget.link != "")			{				var req:URLRequest = new URLRequest(e.currentTarget.link);				navigateToURL(req, "_self");			};		};						private function selectPanelFromTimer(e:TimerEvent):void		{			if(_currPanel == _numOfPanels - 1)			{				_timer.stop();				dispatchEvent(new SlideShowEvent(SlideShowEvent.RESUME_SHOW));			} else {				selectPanel(_currPanel + 1);			};					};						private function startTimer():void		{			_timer = new Timer(PAUSE_TIME * 1000);			_timer.addEventListener(TimerEvent.TIMER, selectPanelFromTimer);			_timer.start();		};				};	}; // end
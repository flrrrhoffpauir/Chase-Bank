/** *	all code copyright (c) 2008 T3 The Think Tank. All rights reserved. *	Re-use of this code without express written permission is prohibited. */package application{	//   import flash	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.net.*;	import flash.utils.Timer;	import flash.utils.getTimer;	import flash.text.TextField;	import flash.external.ExternalInterface;	import flash.system.Security;		//xml	import flash.net.URLLoader;	import application.jason.safeDomain;		//   import external	import application.models.Model;	import application.events.SlideShowEvent;				//   import plugins	import gs.TweenFilterLite;	import gs.easing.Expo;				public class App extends MovieClip	{				//---------------------------------------		//   VARIABLES		//---------------------------------------				private var _model:Model;				private var _totalNavItems:Number = 0;		private var _lastBtnX:Number = 656;		private var _btnSpacing:Number = 20;		private var _pauseTime:Number;		private var _isPaused:Boolean = false;		private var _loader:Loader;		private var _preloader:MovieClip;		public var _pauseButton:MovieClip;		private var _accessibility:String;		private var _timer:Timer;		private var _timerHasStarted:Boolean = false;				private var _currImage:Number;		private var _prevImage:Number;				// static properties		private static var PAUSE_ID:Number = 5;		private static var SPEED:Number = 1;		private static var EASE:Function = Expo.easeOut;				//parameters from the html file		public var xmlID:String;				public var ai:String;		public var rootPath:String;				public var _xml:XML;				/**			 *   @constructor		 */		public function App()		{			addEventListener(SlideShowEvent.MODEL_READY, makeNav, false, 0, true);						//loading info from html parameters			xmlID = root.loaderInfo.parameters.xml_data;			ai = root.loaderInfo.parameters.AI;			rootPath = root.loaderInfo.parameters.Root;									//*STANDALONE TESTING 			xmlID = "data/mt1_home_data.xml"; 			rootPath = "content/"; 			ai = "823";			//*/									loadXMLFileURL();		};						/// ----LOAD XML---- ////////////		private function loadXMLFileURL():void {			var loader=new URLLoader(new URLRequest("data/flash_domains.xml")); // <---testing			// var loader=new URLLoader(new URLRequest(rootPath+"content/ecpweb/loyalty/document/flash_domains.xml"));			loader.addEventListener(Event.COMPLETE,loadedCompleteHandler);		}						private function loadedCompleteHandler(e:Event):void {			//e.target.removeEventListener(Event.COMPLETE,loadedCompleteHandler);			_xml=XML(e.target.data);						if(safeDomain.test_URL(xmlID, _xml) && safeDomain.test_URL(rootPath, _xml) && test_ai(ai) ){				//trace("######## "+ _xml +" ##########");				_model = new Model(xmlID);				//trace("true safeDoamin ");			}			else{				_model = new Model(rootPath+"content/ecpweb/loyalty/document/error_catch_data.xml")				//trace("false safeDoamin");			}									addChild(_model);			_model.init();		}				public function test_ai(val){			if (!isNaN(Number(val)))          		return true;			else			    return false;		}								/******************************************************		 *   Destroy method to be called when no longer in use		 ******************************************************/		public function destroy():void		{			// cascade			// listeners removed			removeEventListener(SlideShowEvent.MODEL_READY, makeNav, false);			// purged from DisplayList			// invalidated for GC					};								//---------------------------------------		//   GETTER/SETTERS		//---------------------------------------				//---------------------------------------		//   PUBLIC METHODS		//---------------------------------------				//---------------------------------------		//   EVENT HANDLERS		//---------------------------------------				private function makeNav(e:SlideShowEvent):void		{			_totalNavItems = e.data.nav.navitem.length();			_accessibility = e.data.accessibility;			_pauseTime = e.data.pausetime;						// make the instances now			makeHolders(e.data);			buildNav(e.data);		};						private function pauseShow(e:SlideShowEvent):void		{			_timer.stop();			trace("pause show");		}						private function resumeShow(e:SlideShowEvent):void		{			restartTimer();		}						private function rollover(e:MouseEvent):void		{			// trace(e.type + " " + e.target + " id: " + e.target.id);		};						private function rollout(e:MouseEvent):void		{			// trace(e.type + " " + e.target + " id: " + e.target.id);		};						private function clicked(e:MouseEvent):void		{			// trace(e.type + " " + e.target + " id: " + e.target.parent.id);					_timer.stop();			highlightNav(e.target.parent.id);			showImage(e.target.parent.id);						// restartTimer();		};						private function pauseClicked(e:MouseEvent):void		{			// trace(e.type + " " + e.target + " id: " + e.target.parent.id);						if(_isPaused == false)			{				_isPaused = true;				_timer.stop();				TweenFilterLite.to(_pauseButton.grey, SPEED, { alpha:0, ease:EASE });			}			else			{				_isPaused = false;				restartTimer();								TweenFilterLite.to(_pauseButton.grey, SPEED, { alpha:1, ease:EASE });			}		}						private function hsReleased(e:Event):void		{			var req:URLRequest = new URLRequest(e.target.parent.urlString);			//navigateToURL(req, "_blank");						var openWindow:String = e.target.parent.win;						if (openWindow == "true") {				navigateToURL(req, "_blank");			}			else {				if(safeDomain.test_URL(e.target.parent.urlString, _xml) == true){					navigateToURL(req, "_self");				}			}		}						//---------------------------------------		//   PRIVATE & PROTECTED INSTANCE METHODS		//---------------------------------------						private function makeHolders(xmlData:XML):void		{			for(var i:Number = 0; i < _totalNavItems; i++)			{				// make the holder				var mc:MovieClip = new MovieClip();				mc.name = "holder" + i;				mc.x = mc.y = 0;				mc.alpha = 0;				addChild(mc);								// insert a picholder to store the image				var picHolder:MovieClip = new MovieClip();				picHolder.name = "picHolder";				picHolder.x = picHolder.y = 0;				mc.addChild(picHolder);								// insert a hotspot				var hs:MovieClip = new MovieClip();				hs.name = "hs";								//-- Apend AI to links where applicable				//trace("######## "+ xmlData.nav.navitem[i].hotspot.url +" ##########");				var hotSpotLink:String = safeDomain.containerLinks(rootPath, xmlData.nav.navitem[i].hotspot.url, _xml);				//var xmlUrl:String = xmlData.nav.navitem[i].hotspot.url;				//trace(hotSpotLink+" ### NEW");				var xmlUrl:String = hotSpotLink;				var aiUrl:String;				var newWin:String = xmlData.nav.navitem[i].hotspot.openWin;								if(xmlUrl.indexOf('?',0) != -1)					aiUrl = xmlUrl + "&AI=" + ai;				else if(xmlUrl.charAt(xmlUrl.length-1) == '/')					aiUrl = xmlUrl;				else					aiUrl = xmlUrl + "?AI=" + ai;												//--------------------------------------								hs.urlString = aiUrl; //<-------- updated this call for the url				hs.win = newWin;				//hs.urlString = xmlData.nav.navitem[i].hotspot.url; --- old				hs.x = xmlData.nav.navitem[i].hotspot.x_coord;				hs.y = xmlData.nav.navitem[i].hotspot.y_coord;								// hotspot "area"				var hsArea:MovieClip = new MovieClip();				hsArea.graphics.beginFill(0x00FF00);            	hsArea.graphics.drawRect(0, 0, xmlData.nav.navitem[i].hotspot.width, xmlData.nav.navitem[i].hotspot.height);             	hsArea.graphics.endFill();				hs.addChild(hsArea);								hs.alpha = (xmlData.nav.navitem[i].hotspot.visible == "true") ? 1 : 0;				hs.buttonMode = true;				hs.addEventListener(MouseEvent.CLICK, hsReleased, false, 0, true);				mc.addChild(hs);			}		}						public function buildNav(xmlData:XML):void		{			if(_totalNavItems > 1)			{				_pauseButton = new Pause() as MovieClip;				_pauseButton.x = _lastBtnX + _btnSpacing;				_pauseButton.y = 275;				_pauseButton.id = PAUSE_ID;				_pauseButton.addEventListener(MouseEvent.CLICK, pauseClicked, false, 0, true);				_pauseButton.buttonMode = true;				addChild(_pauseButton);				for(var i:Number = _totalNavItems-1; i > -1; i--)				{					var mc:MovieClip = new NavButton();					mc.name = "nav" + i;					mc.id = i;					mc.txt.text = mc.shadow.text = i+1;					mc.grey.mouseEnabled = false;					mc.txt.mouseEnabled = false;					mc.shadow.mouseEnabled = false;					mc.buttonMode = true;					mc.x = _lastBtnX;					mc.y = 275;					mc.addEventListener(MouseEvent.ROLL_OVER, rollover, false, 0, true);					mc.addEventListener(MouseEvent.ROLL_OUT, rollout, false, 0, true);					mc.addEventListener(MouseEvent.CLICK, clicked, false, 0, true);					addChild(mc);										_lastBtnX -= _btnSpacing;				}			}			else			{							_totalNavItems = 1;				_isPaused = true;			}			loadMovies(xmlData);			loadAccessibility();		}						private function loadMovies(xmlData:XML):void		{						var mc:MovieClip;			for(var i:Number = 0; i < _totalNavItems; i++)			{				_loader	= new Loader();				if(i < 1)				{					_loader.contentLoaderInfo.addEventListener(Event.OPEN, showPreloader);					_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, initImage);				}								_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, justAddListeners);								mc = MovieClip(getChildByName("holder" + i));				MovieClip(mc.getChildByName("picHolder")).addChild(_loader);								if(_totalNavItems > 1)				{					_loader.load(new URLRequest(rootPath + xmlData.nav.navitem[i].image)); //-------------Add rootPath				}				else				{					_loader.load(new URLRequest(rootPath + xmlData.nav.navitem[0].image)); //-------------Add rootPath				}						}		}						private function highlightNav(id:Number):void		{			var nav:MovieClip;			for(var i:Number = 0; i < _totalNavItems; i++)			{				nav = MovieClip(getChildByName("nav" + i));				if(i == id)				{					TweenFilterLite.to(nav.grey, SPEED, { alpha:0, ease:EASE });					nav.removeEventListener(MouseEvent.ROLL_OVER, rollover, false);					nav.removeEventListener(MouseEvent.ROLL_OUT, rollout, false);					nav.removeEventListener(MouseEvent.CLICK, clicked, false);				}				else				{					TweenFilterLite.to(nav.grey, SPEED, { alpha:1, ease:EASE });					nav.addEventListener(MouseEvent.ROLL_OVER, rollover, false, 0, true);					nav.addEventListener(MouseEvent.ROLL_OUT, rollout, false, 0, true);					nav.addEventListener(MouseEvent.CLICK, clicked, false, 0, true);				}			}		}						private function initImage(e:Event):void		{			// for the first swf only			// justAddListeners(e);						TweenFilterLite.to(_preloader, SPEED/2, { alpha:0, ease:EASE, onComplete:removeObjectFromDisplayList, onCompleteParams:[_preloader] });			if(_currImage != 0) showImage(0);							   		}						private function justAddListeners(e:Event):void		{						// listeners for swfs. now does the first swf			var mc:* = e.target.loader.content;			if(mc is MovieClip)			{				// listener for all SWFs to dispatch to				if(mc["_tlv"]) mc["_tlv"].addEventListener(SlideShowEvent.RESUME_SHOW, resumeShow)								// add listeners if the RolloverButtonOverview class is being imported				if(mc["_rb"])				{					mc["_rb"].addEventListener(SlideShowEvent.PAUSE_SHOW, pauseShow);					mc["_rb"].addEventListener(SlideShowEvent.RESUME_SHOW, resumeShow);				}			}		}						private function showImage(id:Number):void		{			if(_totalNavItems > 1) highlightNav(id);			_prevImage = _currImage;			_currImage = id;						var mc:MovieClip;			var num:Number;			for(var i:Number = 0; i < _totalNavItems; i++) {				mc = MovieClip(getChildByName("holder"+i));				num = (i == id) ? 1 : 0;				if(i != id) setChildIndex(mc, stage.numChildren+1);								var tempMC:* = Loader(MovieClip(mc.getChildByName("picHolder")).getChildAt(0)).content;								if(i == id)				{					resetImage(tempMC);					TweenFilterLite.to(mc, SPEED, { alpha:num, ease:EASE, onComplete:playImage, onCompleteScope:this, onCompleteParams:[tempMC] });				} else {					TweenFilterLite.to(mc, SPEED, { alpha:num, ease:EASE, onComplete:resetImage, onCompleteScope:this, onCompleteParams:[tempMC] });				}			}						if(_isPaused != true && _totalNavItems > 1) {				if(_timerHasStarted == false) {					startTimer();				}				else				{					// moved this to the playImage() method					// restartTimer();				}			}		}						private function playImage(mc:*):void		{			// if not a movieclip, restart timer. if a movieclip and has init timelineview, play mc			if(mc is MovieClip && mc["_tlv"]) 			{				_timer.stop();				mc.gotoAndPlay("start");			}			else			{				restartTimer();			}		}						private function resetImage(mc:*):void		{			// reset if MovieClip, not if Bitmap			if(mc is MovieClip && mc["_tlv"]) mc.gotoAndStop(0);		}				private function showNextImage(e:Event):void {			_timer.stop();			var id:Number = (_currImage < _totalNavItems-1) ? _currImage + 1 : 0;			if(_isPaused != true) showImage(id);		}						private function showPreloader(e:Event):void		{			_preloader = new PreloaderClip();			_preloader.x = 358;			_preloader.y = 150;			addChild(_preloader);			TweenFilterLite.to(_preloader, SPEED/2, { alpha:1, ease:EASE });		}						private function startTimer():void {			_timer = new Timer(_pauseTime*1000);			_timer.addEventListener(TimerEvent.TIMER, showNextImage);			_timer.start();			_timerHasStarted = true;		}				private function restartTimer():void { _timer.start(); }				private function loadAccessibility():void { accessibility.text = _accessibility; }				private function removeObjectFromDisplayList(obj:MovieClip):void { if(this.contains(obj)) removeChild(obj); }			};	};		
// variables  -------------------------------------------------------------------------------------_quality = "BEST";var typeInterval:Number;var i:Number = 0;var bulletInterval:Number;var b:Number = 0;var numOfBullets:Number = 3;var portalInterval:Number;var count:Number = 0;var portalArray:Array = [];var swipeBottomInterval:Number;var p:Number = 0;// functions  -------------------------------------------------------------------------------------// Sets an interval to type out the textfunction typeWrite(txt:String, t:TextField, speed:Number):Void {	stop();	i = 0;	txt = txt.toUpperCase();	clearInterval(typeInterval);	typeInterval = setInterval(this, "typeChar", speed, txt, t);}// Types text like a type writerfunction typeChar(txt:String, t:TextField):Void {	if(i == txt.length) {		t.text = txt;		updateFormat(t);		clearInterval(typeInterval);		play();	} else {		t.text = txt.substr(0, i);		updateFormat(t);		i++;	}}// Updates kerning of text as it's being typedfunction updateFormat(field:TextField):Void {	var kernFormat:TextFormat = new TextFormat();	kernFormat.letterSpacing = -3;	field.setTextFormat(0, 1, kernFormat);	field.setTextFormat(5, 7, kernFormat);	kernFormat.letterSpacing = 3;	field.setTextFormat(1, 2, kernFormat);}// Sets interval to show "FREE" bulletsfunction showFreeBullets(dist:Number, speed:Number, dir:String):Void {	stop();	clearInterval(bulletInterval);	bulletInterval = setInterval(this, "showBullet", speed, dist, dir);}// Shows "FREE" bullet points// Then tweens in the body (sub) copyfunction showBullet(dist, dir):Void {	var mc:MovieClip = this["free" + b + "_mc"];	Tweener.addTween(mc, {_x: mc._x + dist, time: .5, transition: "Strong.easeOut", onMotionStopped: subTween});		function subTween():Void {		if(dir == "down") {			Tweener.addTween(mc.sub, {_y: mc.sub._y + 35, time: .5, transition: "Strong.easeOut"});		} else {			if(Stage.width == 728) {				Tweener.addTween(mc.sub, {_x: mc.sub._x + 310, time: .5, transition: "Strong.easeOut"});			} else {				Tweener.addTween(mc.sub, {_x: mc.sub._x + 170, time: .5, transition: "Strong.easeOut"});			}		}	}		b++;		if(b >= numOfBullets) {		clearInterval(bulletInterval);		play();	}}// Sets interval for portals to appearfunction setPortalInterval():Void {	generatePortalArray();	clearInterval(portalInterval);	portalInterval = setInterval(this, "movePortalDown", 20);}// Creates an array for the top portalsfunction generatePortalArray():Void {	for(var i:Number = 0; i < 16; i++) {		var mc:MovieClip = eval("bp" + i);		portalArray.push(mc);	}}// Brings portals in from offstage// (top portals)function movePortalDown():Void {	var mc:MovieClip = portalArray[count];	mc.nscale = Math.random() * 100;	mc.nx = Stage.width - Math.ceil(Math.random() * 260 - 200);	mc.ny = Stage.height - Math.ceil(Math.random() * 150 - 160);		Tweener.addTween(mc, {_x: mc._nx, _y: mc.ny, _xscale: mc.nscale, _yscale: mc.nscale, time: .7, transition: "Strong.easeOut"});			count++;		if(count >= portalArray.length) {		clearInterval(portalInterval);	}}// Bring in stationary portalsfunction addStationaryPortals(dist:Number):Void {	for(var i:Number = 0; i < 10; i++) {		var mc:MovieClip = eval("p" + i);		mc.dlay = random(9) / 10;		Tweener.addTween(mc, {_y: mc._y + dist, time: .5, delay: mc.dlay, transition: "Strong.easeOut"});	}}// Set interval to move bottom portalsfunction swipeBottomPortals():Void {	clearInterval(swipeBottomInterval);	swipeBottomInterval = setInterval(this, "swipeBottom", 5);}// Move bottom portals to top leftfunction swipeBottom():Void {	var mc:MovieClip = eval("tp" + p);	mc.newScale = Math.random() / 2 * 100;	Tweener.addTween(mc, {_xscale: mc.newScale, _yscale: mc.newScale, time: .3, transition: "Strong.easeOut"});	if((p % 2) == 0) {		Tweener.addTween(mc, {_x: mc._x + -(Math.random() * Stage.width + Stage.width), _y: mc._y + -(Math.random() * Stage.height + Stage.height), time: 1.5, transition: "Strong.easeOut"});	} else {		Tweener.addTween(mc, {_x: mc._x + -(Math.random() * Stage.width + (Stage.width / 2)), _y: mc._y + -(Math.random() * Stage.height + (Stage.height / 2)), time: 1.5, transition: "Strong.easeOut"});	}		Tweener.addTween(mc, {_alpha: 0, time: 2, transition: "Strong.easeOut"});		p++;			if(p >= 16) {		clearInterval(swipeBottomInterval);	}}function defaultClick():Void {	getURL(_root.clickTag, "_blank");}function setHotSpot():Void {	hotspot.onRelease = defaultClick;	hotspot.onRollOver = function():Void {		cta_mc.cta_bg_mc.gotoAndPlay("shimmer");		if(Stage.width == 728) {			Tweener.addTween(cta_mc.arrow_mc, {_x: 34, time: .5, transition: "Strong.easeOut"});		} else {			Tweener.addTween(cta_mc.arrow_mc, {_x: 50, time: .5, transition: "Strong.easeOut"});		}	}	hotspot.onRollOut = function():Void {		if(Stage.width == 728) {			Tweener.addTween(cta_mc.arrow_mc, {_x: 29, time: .5, transition: "Strong.easeOut"});		} else {			Tweener.addTween(cta_mc.arrow_mc, {_x: 47, time: .5, transition: "Strong.easeOut"});		}	}}setHotSpot();
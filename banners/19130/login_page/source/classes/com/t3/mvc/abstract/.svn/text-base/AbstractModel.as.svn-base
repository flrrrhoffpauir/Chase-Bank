/******************************************************************************************************AbstractModel//  Created by David Dinh                   ffLL                                      LLGG//  Sr. Rich Media Designer               LL######EEtt                            ..KK##DD//  on 2007-05-16.                      ii############KK;;                        GG##LL..//  Copyright (c) 2007 __T3__.          ..EE##############ff                    iiWW;;//  All rights reserved.                  ....DD############GG                  GGii                                       LL#####################KK::            ;;EE                  888    888           GGDDLL#######EE##########WWii          EEtt                  888    888                    ;;;;  tt############EEttiiiiKKKK                  888    888                            ;;KK################KK..88888b.   8888b.  888888 888888 .d88b.  888d888 88888b.     ..ttffLLWW######KK888 "88b     "88b 888    888   d8P  Y8b 888P"   888 "88b            ..KK######;;888  888 .d888888 888    888   88888888 888     888  888              ;;######tt 888 d88P 888  888 Y88b.  Y88b. Y8b.     888     888  888                EE####LL88888P"  "Y888888  "Y888  "Y888 "Y8888  888     888  888                ;;####LL 888                                                                       LL##DD888   88888b.  888  888 88888b.d88b.   8888b.                               LL##LL888   888 "88b 888  888 888 "888 "88b     "88b                                LL##            888  888 888  888 888  888  888 .d888888                                jj##tt      888 d88P Y88b 888 888  888  888 888  888                                ii##tt          88888P"   "Y88888 888  888  888 "Y888888                                  tt;;      888                                            888                                            888******************************************************************************************************/package com.t3.mvc.abstract{	// I N C L U D E S		import flash.events.EventDispatcher;		import com.t3.mvc.interfaces.*;	//import application.mvc.*;	import com.t3.mvc.events.*;		/**	* Abtsract Mode is the abstract instantiation of the Observable interface	* 	*/	public class AbstractModel extends EventDispatcher implements Observable  {		// P R O P E R T I E S		private var _changed	:Boolean = false;		private var _observers	:Array;		private var _events		:Array;				// C O N S T R U C T O R		public function AbstractModel() {			_observers = new Array();			_events = new Array();		}				// G E T T E R S  &  S E T T E R S				/**		* Gets whether the model has changed or not		* 		* @return	_changed	Boolean		*/		public function get changed():Boolean{			return _changed;		}				// M E T H O D S		/**		* Adds an observer to the observer list		* 		* @param	s	String		* @param	o	Observer		*/		public function addObserver(s:String, o:Observer):Boolean {					//cant add a null observer			if(o == null || s == ""){ 				return false;			}			var exists:Boolean = false;			//dont add observer more than once			for(var i:Number = 0; i < _observers.length; i++){				if(_observers[i] == o){					exists = true;				}			}			//add observers			if(!exists)				_observers.push(o);						_events.push({event:s, observer:o});			this.addEventListener(s, o[s]);					return true;					}				/**		* Removes string and observer from respective arrays		*		* @param		s		String value of event		* @return		o		observer to be added		*/		public function removeObserver(s:String, o:Observer):Boolean {						//find and remove			var len:Number = _observers.length;						for(var i:Number = 0; i<len;i++){				if(_observers[i] == o && _events[i] == s) {									_observers.splice(i,1);					_events.splice(i,1);															this.removeEventListener(s, o[s]);									return true;				}			}			return false;					}			/**		* dispatches event plus data object		*		* @param		s		String value of event		* @throws		evt		data object to distribute to views		*/		public function notifyObservers(s:String, evt:Object):void {						if(!_changed){				return;			}			//clear changed			clearChanged();					dispatchEvent(new DataEvent(s, evt) );					}			/**		* Clears observer array		*		*/		public function clearObservers():void{			_observers = new Array();		}			/**		* set changed boolean, so that notify can be used		*		*/		public function setChanged():void{			//trace("setChanged called");			_changed = true;		}			/**		* clears changed boolean		*		*/		public function clearChanged():void{			//trace("clearChanged called");			_changed = false;		}				/**		* returns changed boolean		*		*/		public function hasChanged():Boolean{			//trace("hasChanged called: " + _changed);			return _changed;		}			/**		* returns number of observers		*		*/		public function countObservers():Number {			return _observers.length;		}								// L I S T E N E R S	}}
/******************************************************************************************************AbstractView//  Created by David Dinh                   ffLL                                      LLGG//  Sr. Rich Media Designer               LL######EEtt                            ..KK##DD//  on 2007-05-16.                      ii############KK;;                        GG##LL..//  Copyright (c) 2007 __T3__.          ..EE##############ff                    iiWW;;//  All rights reserved.                  ....DD############GG                  GGii                                       LL#####################KK::            ;;EE                  888    888           GGDDLL#######EE##########WWii          EEtt                  888    888                    ;;;;  tt############EEttiiiiKKKK                  888    888                            ;;KK################KK..88888b.   8888b.  888888 888888 .d88b.  888d888 88888b.     ..ttffLLWW######KK888 "88b     "88b 888    888   d8P  Y8b 888P"   888 "88b            ..KK######;;888  888 .d888888 888    888   88888888 888     888  888              ;;######tt 888 d88P 888  888 Y88b.  Y88b. Y8b.     888     888  888                EE####LL88888P"  "Y888888  "Y888  "Y888 "Y8888  888     888  888                ;;####LL 888                                                                       LL##DD888   88888b.  888  888 88888b.d88b.   8888b.                               LL##LL888   888 "88b 888  888 888 "888 "88b     "88b                                LL##            888  888 888  888 888  888  888 .d888888                                jj##tt      888 d88P Y88b 888 888  888  888 888  888                                ii##tt          88888P"   "Y88888 888  888  888 "Y888888                                  tt;;      888                                            888                                            888******************************************************************************************************/package com.t3.mvc.abstract{	// I N C L U D E S		import flash.display.Sprite;	import flash.events.Event;		import com.t3.mvc.interfaces.*;	import com.t3.mvc.events.DataEvent;	//import application.mvc.*;	/**	* Abstractview is the abstract class instantiation of the Observer and View interfaces, as well as thesupplementalview interface	* 	* @return	_data	Object	*/	public class AbstractView extends Sprite implements Observer, View {		// P R O P E R T I E S				private var _model			:AbstractModel; // A reference to the model.		private var _controller		:AbstractController; // A reference to the controller.				// C O N S T R U C T O R		public function AbstractView (m:AbstractModel, c:AbstractController) {						// Set the model.			this.model = m;			// If a controller was supplied, use it. Otherwise let the first call to getController( ) create the default controller.			if (c != null) {				this.controller = c;			}					}				// G E T T E R S  &  S E T T E R S				/**		* Allow sthe model to be set		* 		* @param	m	AbstractModel		*/		public function set model (m:AbstractModel):void {			_model = m;		}				/**		* Allows the model associated to be retrieved		* 		* @return	_model	AbstractModel		*/		public function get model ( ):AbstractModel {			return _model;		}				/**		* Allows the controller to be set		* 		* @param	c		AbstractController		*/		public function set controller (c:AbstractController):void {			_controller = c;			// Tell the controller this object is its view.			this.controller.view = this;		}				/**		* Allows the controller associated to be retrieved		* 		* @return	_controller		AbstractController		*/		public function get controller ():AbstractController {						// If a controller hasn't been defined yet...			if (_controller == null) {				// ...make one. Note that defaultController( ) is normally overridden by AbstractView's subclass so that it returns the appropriate controller for the view.				this.controller = defaultController(this.model);			}			return _controller;					}						// M E T H O D S		/**		* returns default controller to be used by view. To be overriden in concrete classes		*		* @param		model		signify the model to be referenced by controller		*/		public function defaultController (model:AbstractModel):AbstractController {			return null;		}			/**		* A do-nothing implementation of the Observer interface's update( ) method. 		* Subclasses of AbstractView provide a concrete implementation for this method.		* TO BE OVERRIDEN 				*		* @param		model		signify the model to be referenced by controller		*/				public function updated(evt:DataEvent):void {			trace(this + " recieved update" )		}				public function start(evt:DataEvent):void {			//trace(this + " recieved new oilTopic" )		}				// L I S T E N E R S	}}
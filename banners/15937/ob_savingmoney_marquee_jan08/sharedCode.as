// sharedCode.as// variables  -------------------------------------------------------------------------------------_quality = "BEST";var typeInterval:Number;var i:Number = 0;var portalInterval:Number;var count:Number = 0;var portalArray:Array = [];var bottomPortalInterval:Number;var bcount:Number = 0;var bottomPortalArray:Array = [];// functions  -------------------------------------------------------------------------------------// Sets an interval to type out the textfunction typeWrite(txt:String, t:TextField):Void {	stop();	i = 0;	txt = txt.toUpperCase();	clearInterval(typeInterval);	typeInterval = setInterval(this, "typeChar", 40, txt, t);}// Types text like a type writerfunction typeChar(txt:String, t:TextField):Void {	if(i == txt.length) {		t.text = txt;		clearInterval(typeInterval);		play();	} else {		t.text = txt.substr(0, i);		i++;	}}// create an array for the top portalsfunction generatePortalArray():Void {	for(var i:Number = 0; i < 16; i++) {		var mc:MovieClip = eval("bp" + i);		portalArray.push(mc);	}}// sets interval for portals to appearfunction setPortalInterval():Void {	generatePortalArray();	clearInterval(portalInterval);	portalInterval = setInterval(this, "movePortalDown", 20);}// brings portals in from offstagefunction movePortalDown():Void {	var mc:MovieClip = portalArray[count];	mc.nscale = Math.random() * 100;	mc.nx = Stage.width - Math.ceil(Math.random() * 260 - 200);	mc.ny = Stage.height - Math.ceil(Math.random() * 150 - 160);		Tweener.addTween(mc, {_x: mc._nx, _y: mc.ny, _xscale: mc.nscale, _yscale: mc.nscale, time: .7, transition: "Strong.easeOut"});			count++;		if(count >= portalArray.length) {		clearInterval(portalInterval);	}}// bring in stationary portalsfunction addStationaryPortals():Void {	for(var i:Number = 0; i < 3; i++) {		var mc:MovieClip = eval("p" + i);		mc.dlay = random(9) / 10;		Tweener.addTween(mc, {_y: mc._y + 230, time: .5, delay: mc.dlay, transition: "Strong.easeOut"});	}}// bring in small stationary portalsfunction addSmallStationaryPortals():Void {	for(var i:Number = 0; i < 5; i++) {		var mc:MovieClip = eval("s" + i);		mc.dlay = random(9) / 10;		Tweener.addTween(mc, {_y: mc._y - 230, time: .5, delay: mc.dlay, transition: "Strong.easeOut"});	}}function showTagLine():Void {	Tweener.addTween(tagline_mc, {_y: tagline_mc._y - 20, _alpha: 100, time: 1, transition: "Strong.easeOut"});}function setHotSpot():Void {	this.cta_mc.onRollOver = function():Void {		cta_mc.bg.gotoAndPlay("shimmer");		Tweener.addTween(cta_mc.arrow_mc, {_x: 52, time: .3, transition: "Strong.easeOut"});	}	this.cta_mc.onRollOut = function():Void {		Tweener.addTween(cta_mc.arrow_mc, {_x: 48, time: .3, transition: "Strong.easeOut"});	}	this.cta_mc.onRelease = defaultClick;}function defaultClick():Void {	getURL("http://resources.chase.com/ViewAd.aspx?AD=|||32538|||", "_blank");}// hack  ------------------------------------------------------------------------------------------// create an array for the top portalsfunction generateBottomPortalArray():Void {	for(var i:Number = 0; i < 16; i++) {		var mc:MovieClip = eval("tp" + i);		bottomPortalArray.push(mc);	}}// sets interval for portals to appearfunction setBottomPortalInterval():Void {	generateBottomPortalArray();	clearInterval(bottomPortalInterval);	bottomPortalInterval = setInterval(this, "movePortalUp", 20);}// brings portals in from offstagefunction movePortalUp():Void {	var mc:MovieClip = bottomPortalArray[bcount];	mc.nscale = Math.random() * 100;	mc.nx = -(Stage.width - Math.ceil(Math.random() * 260));	mc.ny = -(Stage.height - Math.ceil(Math.random() * 150 - 30));		Tweener.addTween(mc, {_x: mc._nx, _y: mc.ny, _xscale: mc.nscale, _yscale: mc.nscale, time: .7, transition: "Strong.easeOut"});			bcount++;		if(bcount >= bottomPortalArray.length) {		clearInterval(bottomPortalInterval);	}}// run at once  -----------------------------------------------------------------------------------
/**                          EventManager Class*                          Created on 2008-02-12**                            .ed"""" """$$$$be.                     *                          -"           ^""**$$$e.                  *                        ."                   '$$$c                 *                       /                      "4$$b                *                      d  3          ?          $$$$                *                      $  *                   .$$$$$$               *                     .$  ^c           $$$$$e$$$$$$$$.              *                     d$L  4.         4$$$$$$$$$$$$$$b              *                     $$$$b ^ceeeee.  4$$ECL.F*$$$$$$$              *         e$""=.      $$$$P d$$$$F $ $$$$$$$$$- $$$$$$              *        z$$b. ^c     3$$$F "$$$$b   $"$$$$$$$  $$$$*"      .=""$c  *       4$$$$L   \     $$P"  "$$b   .$ $$$$$...e$$        .=  e$$$. *       ^*$$$$$c  %..   *c    ..    $$ 3$$$$$$$$$$eF     zP  d$$$$$ *         "**$$$ec   "\   %ce""    $$$  $$$$$$$$$$*    .r" =$$$$P"" *               "*$b.  "c  *$e.    *** d$$$$$"L$$    .d"  e$$***"   *                 ^*$$c ^$c $$$      4J$$$$$% $$$ .e*".eeP"         *                    "$$$$$$"'$=e....$*$$**$cz$$" "..d$*"           *                      "*$$$  *=%4.$ L L$ P3$$$F $$$P"              *                         "$   "%*ebJLzb$e$$$$$b $P"                *                           %..      4$$$$$$$$$$ "                  *                            $$$e   z$$$$$$$$$$%                    *                             "*$c  "$$$$$$$P"*                              ."""*$$$$$$$$bc                      *                           .-"    .$***$$$"""*e.                   *                        .-"    .e$"     "*$c  ^*b.                 *                 .=*""""    .e$*"          "*bc  "*$e..            *               .$"        .z*"               ^*$e.   "*****e.      *               $$ee$c   .d"    @author timmy   "*$.        3.     *               ^*$E")$..$"     @version 1.0.0     *   .ee==d%     *                  $.d$$$*                           *  J$$$e*      *                   """""                             "$$$"Gilo95'**            all code copyright (c) 2008 T3. All rights reserved.*/class classes.utils.EventManager{	// constants			// public properties	private static var __CLASS_INSTANCE:EventManager = undefined;		// private properties	private static var __arr_listeners:Array = []; // hold references to the objects				// Constructor  -------------------------------------------------------------------------------	/**	 *  EventManager Class	 */	function EventManager() { };	// private methods  ---------------------------------------------------------------------------		/**	 *  Displays the Array of Listeners, their event, and the function to which they are mapped	 */	public static function showListeners():Void	{		var len:Number = __arr_listeners.length; // get the length now rather than bog down the for loop		for(var i:Number = 0; i < len; i++)		{			trace(i + " - event: " + __arr_listeners[i].event + "  listener: " + __arr_listeners[i].listener + "  mappedTo: " + __arr_listeners[i].mappedTo);		}	};		// public methods  ----------------------------------------------------------------------------	/**	 *  Insure that we only have one instance in use for managing all events!	 */	public static function getInstance():EventManager	{		// ignore warning 1012 if you see it		if(__CLASS_INSTANCE == undefined) { __CLASS_INSTANCE = new EventManager(); } else { trace("EventManager instance already exists"); };		return __CLASS_INSTANCE;	};		/**	 *  Adds an Object, an event, and a handler to the watch list.	 *	 *  @param _event The event to register for the Object.	 *  @param _listener The Object to register for the event.	 *  @param _mappedTo The Function that will be called upon notification of the event.	 */	public static function addEventListener(_event:String, _listener:Object, _mappedTo:String):Boolean	{		var ev:String;		var li:Object;		// check to see if the Object has already been registered		for(var i in __arr_listeners)		{			ev = __arr_listeners[i].event;			li = __arr_listeners[i].listener;			// if it has, exit			if(ev == _event && li == _listener) { return false; };		}		// ... if it hasn't, then register it now		__arr_listeners.push({ event:_event, listener:_listener, mappedTo:_mappedTo });		return true;	};		/**	 *  Removes an Object, it's event, and it's handler from the watch list.	 *	 *  @param _event The event previously registered to the Object.	 *  @param _listener The Object previously added to the watch list.	 */	public static function removeEventListener(_event:String, _listener:Object):Boolean	{		var ev:String;		var li:Object;		var len:Number = __arr_listeners.length; // get the length now rather than bog down the for loop		for(var i:Number = 0; i < len; i++)		{			ev = __arr_listeners[i].event;			li = __arr_listeners[i].listener;			// if the Object is in the list, remove it			if(ev == _event && li == _listener) { __arr_listeners.splice(i, 1); return true; };		}		// otherwise, just shut down now		return false;	};		/**	 *  Used to inform listeners when an event has occurred.	 *	 *  @param _event The name of the event.	 *  @param _data The additional parameters to be sent to the registered Function. 	 */	public static function dispatchEvent(_event:String, _data:Object):Void	{		// place information into an object		var evtObj:Object = { type:_event, data:_data };		// find Objects registered to hear this event		for(var i:String in __arr_listeners)		{			if(__arr_listeners[i].event == _event)			{				// if the Function has the same name as the event				//__arr_listeners[i].listener[_event](evtObj);				// if the Function has a unique name defined in the mappedTo property				__arr_listeners[i].listener[__arr_listeners[i].mappedTo](evtObj);			}		}	};		// handlers  ----------------------------------------------------------------------------------		//end}
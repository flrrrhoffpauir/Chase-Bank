// variables  -------------------------------------------------------------------------------------_quality = "BEST";var typeInterval:Number;var i:Number = 0;var portalInterval:Number;var count:Number = 0;var portalArray:Array = [];var swipeBottomInterval:Number;var p:Number = 0;// functions  -------------------------------------------------------------------------------------// Sets an interval to type out the textfunction typeWrite(txt:String, t:TextField, speed:Number):Void {	stop();	i = 0;	txt = txt.toUpperCase();	clearInterval(typeInterval);	typeInterval = setInterval(this, "typeChar", speed, txt, t);}// Types text like a type writerfunction typeChar(txt:String, t:TextField):Void {	if(i == txt.length) {		t.text = txt;		updateFormat(t);		clearInterval(typeInterval);		play();	} else {		t.text = txt.substr(0, i);		updateFormat(t);		i++;	}}// Sets interval for portals to appearfunction setPortalInterval():Void {	generatePortalArray();	clearInterval(portalInterval);	portalInterval = setInterval(this, "movePortalDown", 20);}// Creates an array for the top portalsfunction generatePortalArray():Void {	for(var i:Number = 0; i < 16; i++) {		var mc:MovieClip = eval("bp" + i);		portalArray.push(mc);	}}// Brings portals in from offstage// (top portals)function movePortalDown():Void {	var mc:MovieClip = portalArray[count];	mc.nscale = Math.random() * 100;	mc.nx = Stage.width - Math.ceil(Math.random() * 260 - 200);	mc.ny = Stage.height - Math.ceil(Math.random() * 150 - 160);		Tweener.addTween(mc, {_x: mc._nx, _y: mc.ny, _xscale: mc.nscale, _yscale: mc.nscale, time: .7, transition: "Strong.easeOut"});			count++;		if(count >= portalArray.length) {		clearInterval(portalInterval);	}}// Bring in stationary portalsfunction addStationaryPortals(dist:Number):Void {	for(var i:Number = 0; i < 11; i++) {		var mc:MovieClip = eval("p" + i);		mc.dlay = random(9) / 10;		Tweener.addTween(mc, {_y: mc._y + dist, time: .5, delay: mc.dlay, transition: "Strong.easeOut"});	}}// Set interval to move bottom portalsfunction swipeBottomPortals():Void {	clearInterval(swipeBottomInterval);	swipeBottomInterval = setInterval(this, "swipeBottom", 5);}// Move bottom portals to top leftfunction swipeBottom():Void {	var mc:MovieClip = eval("tp" + p);	mc.newScale = Math.random() / 2 * 100;	Tweener.addTween(mc, {_xscale: mc.newScale, _yscale: mc.newScale, time: .3, transition: "Strong.easeOut"});	if((p % 2) == 0) {		Tweener.addTween(mc, {_x: mc._x + -(Math.random() * Stage.width + Stage.width), _y: mc._y + -(Math.random() * Stage.height + Stage.height), time: 1.5, transition: "Strong.easeOut"});	} else {		Tweener.addTween(mc, {_x: mc._x + -(Math.random() * Stage.width + (Stage.width / 2)), _y: mc._y + -(Math.random() * Stage.height + (Stage.height / 2)), time: 1.5, transition: "Strong.easeOut"});	}		Tweener.addTween(mc, {_alpha: 0, time: 2, transition: "Strong.easeOut"});		p++;			if(p >= 16) {		clearInterval(swipeBottomInterval);	}}function defaultClick():Void {	getURL(_root.clickTag, "_blank");}function setHotSpot():Void {	hotspot.onRelease = defaultClick;	hotspot.onRollOver = function():Void {		cta_mc.gotoAndPlay("shimmer");		phone_mc.gotoAndPlay("shake");	}}
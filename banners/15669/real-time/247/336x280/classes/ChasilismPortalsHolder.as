/** *	ChasilismPortalsHolder Class, Created 2007-12-05 *	Copyright (c) 2007 T3. All rights reserved. * *	@author Timothy Harold *	@version 1.0.0 *	*/import mx.utils.Delegate;class classes.ChasilismPortalsHolder extends MovieClip{	// static properties		// private properties	private var __class_ref:MovieClip;	private var __scope:MovieClip;	private var __right:Number;	private var __bottom:Number;	private var __left:Number;	private var __top:Number;	private var __totalPortals:Number;	private var __maxScale:Number;	// public properties				// Class constructor	/**	 *  ChasilismPortalsHolder Constructor	 */	function ChasilismPortalsHolder(_scope:MovieClip, _totalPortals:Number, _maxScale:Number)	{				// point to this Class		__class_ref = this;				// reference to the portals holder instance		__scope = _scope;				// the total number of portals to instantiate		__totalPortals = _totalPortals;				// the maximum scale of each portal instance		__maxScale = _maxScale;				// let's go!		init();			}		// private methods  ------------------------------------------------------------------------------	/**	 *  Initialize	 */	private function init():Void	{		// map the sandbox boundary lines		/*		__right = __scope._width;		__bottom =  __scope._height;		__left = (__scope._width / 2) - __scope._width;		__top = (__scope._height / 2) - __scope._height;		*/				__right = __scope._width / 2;		__bottom =  __scope._height / 2;		__left = -(__scope._width / 2);		__top = -(__scope._height / 2);				// add the portals to the mcPortalsHolder instance		makePortals();	}			/**	 *  Instantiate portals, give them their randomness, and then turn on the wall manager	 */	private function makePortals():Void	{		var numPs:Number = (__totalPortals == undefined) ? 25 : __totalPortals;		for(var i:Number = 0; i < numPs; i++)		{			var randomScale:Number = Math.round(Math.random() * __maxScale) + 2;			var p:MovieClip = __scope.attachMovie("portal", "portal" + i, i);			p._xscale = p._yscale = randomScale;			var randomQuadX:Number = ((Math.random() * 2 - 1) < 0) ? -1 : 1;			var randomQuadY:Number = ((Math.random() * 2 - 1) < 0) ? -1 : 1;			p._x = Math.round(Math.random() * __right) * randomQuadX;			p._y =  Math.round(Math.random() * __left) * randomQuadY;						// trace("("+ p._x + ", " + p._y + ")");						p.vx = Math.random() * 1 - .5;// 10 - 5;			p.vy = Math.random() * 1 - .5;// 10 - 5;			//portal._xscale = portal._yscale = portal.mass = Math.random() * 100;		}				// attach the onEnterFrame handler to checkWalls() and keep the portals in the box		//__scope.onEnterFrame = Delegate.create(__class_ref, managePortals);			}	//   //   /**//    *  Manage the portals. Keep them within the sandbox.//    *///   function managePortals():Void//   {//   	var numPs:Number = (__totalPortals == undefined) ? 25 : __totalPortals;//   	for(var i = 0; i < numPs; i++)//   	{//   		var p:MovieClip = __scope["portal" + i];//   		p._x += p.vx;//   		p._y += p.vy;//   		checkWalls(p);//   	}//   }//   //   //   /**//    *  Checks each portal to make sure it stays within the sandbox. If it ventures out - turn it around!//    *//    *  @param _p A portal instance to watch//    *///   private function checkWalls(_p:MovieClip):Void//   {//   	if(_p._x < __left + _p._width / 2)//   	{//   		_p._x = __left + _p._width / 2;//   		_p.vx *= -1;//   	}//   	else if(_p._x > __right - _p._width / 2)//   	{//   		_p._x = __right - _p._width / 2;//   		_p.vx *= -1;//   	}//   	if(_p._y < __top + _p._height / 2)//   	{//   		_p._y = __top + _p._height / 2;//   		_p.vy *= -1;//   	}//   	else if(_p._y > __bottom - _p._height / 2)//   	{//   		_p._y = __bottom - _p._height / 2;//   		_p.vy *= -1;//   	}//   }//   //   // public methods  -------------------------------------------------------------------------------//   //   // handlers/listeners  ---------------------------------------------------------------------------//   //   // end//   */}
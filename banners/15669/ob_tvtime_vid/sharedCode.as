import Tweens;stop();// variables  /////////////////////////////////////////////////////////////////////////////////////// interval IDsvar pauseID:Number;var typeID:Number;var swipeInterval:Number;var z:Number = 1;var swipeBottomInterval:Number;var b:Number = 1;_quality = "best";var _tweens:Tweens = new Tweens();// vidPath (path to the external flv) on the Main Timelinevar vidPauseCount:Number = 0; // helper - counter for pausevar i:Number = 0;// copy// on the Main Timeline of the fla ***// Video   ////////////////////////////////////////////////////////////////////////////////////////// set up the nc and ns nc = new NetConnection();nc.connect(null);ns = new NetStream(nc);ns.setBufferTime(3);mcVideo.videoObject.attachVideo(ns);// functions   ////////////////////////////////////////////////////////////////////////////////////// clickTagfunction defaultClick():Void{	getURL(_root.clickTag, "_blank");}// Junie's rippin' text typer functionsfunction typeWrite(txt:String, t:TextField):Void{	stop();	i = 0;	txt = txt.toUpperCase();	clearInterval(typeID);	typeID = setInterval(this, "typeChar", 20, txt, t);}function typeChar(txt:String, t:TextField):Void{	if(i == txt.length)	{		t.text = txt;		clearInterval(typeID);		play();	}	else	{		t.text = txt.substr(0, i);		i++;	}}// <Junies Portal Functions> --------------------------------------------------------------------------------------function mcHover(mc:MovieClip, startX:Number, startY:Number, step:Number, range:Number) {	var count:Number = 0;	mc.onEnterFrame = function():Void {		count += step;		this._y = startY + Math.sin(count) * range;		this._x = startX + Math.cos(count) * 1.5;	}}function swipePortals():Void {	clearInterval(swipeInterval);	swipeInterval = setInterval(this, "swipe", 5);}function swipeBottomPortals():Void {	clearInterval(swipeBottomInterval);	swipeBottomInterval = setInterval(this, "swipeBottom", 5);}function swipe():Void {	var mc:MovieClip = eval("s" + z);	_tweens.scaleTween(mc, mc._xscale, Math.random() / 2 * 100, .3);	if((z % 2) == 0) {		_tweens.xTween(mc, mc._x, mc._x + Math.random() * Stage.width + Stage.width, .5);		_tweens.yTween(mc, mc._y, mc._y + Math.random() * Stage.height + Stage.height, .5);	} else {		_tweens.xTween(mc, mc._x, mc._x + Math.random() * Stage.width + (Stage.width / 2), .5);		_tweens.yTween(mc, mc._y, mc._y + Math.random() * Stage.height + (Stage.height / 2), .5);	}	_tweens.fadeTween(mc, mc._alpha, 0, .3);	z++;	if(z >= 12) {		clearInterval(swipeInterval);	}}function swipeBottom():Void {	var mc:MovieClip = eval("p" + b);	var speed:Number = 1;	_tweens.scaleTween(mc, mc._xscale, Math.random() / 2 * 100, .3);	if((b % 2) == 0) {		_tweens.xTween(mc, mc._x, mc._x + -(Math.random() * Stage.width + Stage.width), speed);		_tweens.yTween(mc, mc._y, mc._y + -(Math.random() * Stage.height + Stage.height), speed);	} else {		_tweens.xTween(mc, mc._x, mc._x + -(Math.random() * Stage.width + (Stage.width / 2)), speed);		_tweens.yTween(mc, mc._y, mc._y + -(Math.random() * Stage.height + (Stage.height / 2)), speed);	}	_tweens.fadeTween(mc, mc._alpha, 0, speed);	b++;	if(b >= 12) {		clearInterval(swipeBottomInterval);	}}// </Junies Portal Functions> --------------------------------------------------------------------------------------/*// HOTSPOT BTN CODE IS ON INSTANCE TO AVOID YAHOO COMPLAINTSfunction setHotSpot(){	btHotSpot.onRollOver = function():Void	{		//	}}*/// start the vid and advance the playhead to frame 2mcPlayBtn.onRelease = function():Void{	ns.play(vidPath);	gotoAndStop(2);}function setCTA():Void{	mcCTA.onRollOver = function():Void	{		_tweens.xTween(mcCTA.mcArrow, 119, 123, .5);	}	mcCTA.onRollOut = function():Void	{		_tweens.xTween(mcCTA.mcArrow, 123, 119, .5);	}	mcCTA.onRelease = defaultClick;}// resets the pause counter and resumes Main Timeline playback to final resolvefunction startFinalResolve():Void{	// video will restart the halted Flash Timeline	//trace("startFinalResolve()");	vidPauseCount = 0;	_level0.gotoAndPlay("finishingUp");}// repositions the video based on the cue point valuesfunction pos(newX:Number, newY:Number):Void{	// reposition the video Object	mcVideo._x = newX;	mcVideo._y = newY;}function addFill():Void{	// bring in the dark shape	mcFill._x = 0;	mcFill._y = 0;	// start writing out the text 	typeWrite(copy4, txt4);}function pauseVid():Void{	ns.pause();	// start writing out the text 	typeWrite(copy4, txt4);}function removeFill():Void{	// bring in the dark shape	mcFill._x = -5;	mcFill._y = -500;}// removes the intro text after 3 secsfunction watchOutroText():Void{	// clear the interval and resume video playback	vidPauseCount++;	//trace(vidPauseCount);	if(vidPauseCount == 2)	{		clearInterval(vidPauseID);		removeFill();		// clear out all of the old textfields		for(var i:Number = 4; i < 16; i++)		{			this["txt"+i].text = "";		}		ns.pause();		play();	}}		// set up the cue point handlerns.onCuePoint = function(_infoObject:Object):Void{	switch(_infoObject.name)	{		case "pos":			pos(_infoObject.parameters.x, _infoObject.parameters.y);			break;		case "pauseVid":			pauseVid();			break;		case "addFill":			addFill();			break;	}}// run at once   //////////////////////////////////////////////////////////////////////////////////mcLogo.mcChaseTextBlack._alpha = mcCTA._alpha = mcVidReplay._alpha = mcTxtFinalSub._alpha = 0;clearInterval(typeID);clearInterval(vidPauseID);